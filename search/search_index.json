{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Languages","text":"<ul> <li>JavaScript</li> <li>Python</li> <li>Ruby</li> </ul>"},{"location":"javascript/introduction","title":"Introduction","text":""},{"location":"javascript/introduction#characteristics","title":"Characteristics","text":"<ul> <li>Interpreted language</li> <li>No need to compile the program before executing</li> <li>Processed at runtime by interpreter line by line</li> <li>Supports functional programming</li> <li>Uses functions as primary building blocks</li> <li>You can define first-class function, pure functions, closures<ul> <li>higher order functions, arrow fucntions, function expressions</li> </ul> </li> <li>Dynamically typed</li> <li>Weakly typed</li> <li>Allows automatic type conversion between unrelated data types</li> <li>For example, 1 + '2' is evaluated to '12'</li> <li>Automatic garbage collection</li> <li>Single threaded programming language</li> <li>Doesn't have multi-threading capabilities</li> <li>To execute code faster, asynchronous programming can be used</li> <li>It comes installed on every modern web browser</li> </ul>"},{"location":"javascript/introduction#client-side-language","title":"Client-side Language","text":"<ul> <li>Helps in manipulating HTML pages</li> <li>Used to raise dynamic pop-ups on webpages</li> <li>Traps user initiated events like button clicks, link navigation</li> <li>Popular libraries are ReactJS, AngularJS, NextJS, VueJS</li> </ul>"},{"location":"javascript/introduction#backend-side-language","title":"Backend-side Language","text":"<ul> <li>Best and most popular library is NodeJS</li> </ul>"},{"location":"javascript/introduction#basics","title":"Basics","text":"<pre><code>// Single line comment\n/*\nMultiline comment\n*/\n\n// Standard Input\n// Opens a dialogue box and takes user input (as a string)\nvalue = prompt('Enter input value')\n\nconsole.log('Hello') // Prints content in web console\nconsole.log(val1, val2) // Seperated using space by default\ndocument.write('hello') // Writes content directly to web page\nalert('hello') // Opens a dialogue box on web page with the given content\n\n// Safe Navigation\nperson?.info?.name\n</code></pre>"},{"location":"javascript/introduction#strict-mode","title":"Strict Mode","text":"<ul> <li><code>'use strict';</code></li> <li>Introduced to make JS code more secure</li> <li>Prevents common errors while writing code</li> <li>Like initializing variable without declaration</li> <li>Ensures safer code</li> <li>Prevents creation of global variables accidentally</li> <li>Prevents statements like 'with' that can lead to vulnerability</li> <li>Prevents using reserved keywords like 'public' which are not implemented yet</li> <li>But may be introduced in future versions</li> </ul>"},{"location":"javascript/variables","title":"Variables","text":""},{"location":"javascript/variables#variables","title":"Variables","text":"<ul> <li>Defined using camelcase</li> </ul> <pre><code>// Declaration\nlet name = 'John Wick'\nlet employeeName = 'Tom Cruise'\nlet counter = 100\n\n// Get the data type\ntypeof(name) // 'string'\ntypeof(counter) // 'number\n\ndelete object.property\ndelete array[index]\n</code></pre>"},{"location":"javascript/variables#declaration-types","title":"Declaration Types","text":"<ul> <li>Hoisting</li> <li>Moves the declaration of the variables at the top of the code</li> </ul>"},{"location":"javascript/variables#var","title":"Var","text":"<ul> <li><code>var name</code></li> <li>Accessible throughout the defined function</li> <li>Supports hoisting</li> <li>Can be redeclared within the same scope (though not a good practice)</li> <li>Binds <code>this</code></li> </ul> <pre><code>test = () =&gt; {\n  if (true) {\n    x = 10 // Works because hoisting is supported\n    console.log(x) // Prints 10\n    var x = 5\n    var x = 15\n  }\n  console.log(x) // Prints 15\n}\n</code></pre>"},{"location":"javascript/variables#let","title":"Let","text":"<ul> <li><code>let name</code></li> <li>Only accessible within the defined block</li> <li>Doesn't support hoisting</li> <li>Cannot be redeclared within the same scope</li> <li>Does not bind <code>this</code></li> <li>Was introduced after var</li> <li>To improve scoping behaviors of variables and safety of code</li> </ul> <pre><code>test = () =&gt; {\n  if (true) {\n    // x = 10 raises error as hoisting not supported\n    let x = 5\n    // let x = 15 raises an error\n  }\n  // console.log(x) raises an error\n}\n</code></pre>"},{"location":"javascript/variables#const","title":"Const","text":"<ul> <li><code>const text = 'hello'</code></li> <li>Cannot reassign its value</li> <li>Cannot be declared independently: <code>const text; text = 'hello'</code> is incorrect</li> <li>Cannot be redeclared within the same scope</li> <li>Though the same object (like array) can be manipulated</li> <li>Only accessible within the defined block</li> <li>Doesn't support hoisting</li> <li>Does not bind <code>this</code></li> <li>Was introduced along with let</li> </ul> <pre><code>test = () =&gt; {\n  if (true) {\n    // console.log(x) raises error as hoisting not supported\n    const x = 5\n    // x = 10 raises an error\n    // const x = 15 raises an error\n  }\n  // console.log(x) raises an error\n}\n</code></pre>"},{"location":"javascript/variables#types","title":"Types","text":"<ul> <li>Local and global variables are determined from the scope they are defined in</li> <li>Though global variables are sometimes denoted by uppercase</li> <li>No separate declaration types</li> </ul>"},{"location":"javascript/data_types","title":"Data Types","text":""},{"location":"javascript/data_types#data-types","title":"Data Types","text":"<ul> <li><code>null</code> is used to denote nothing</li> <li><code>undefined</code> is used to denote that it's declared but not defined yet</li> <li>So, after declaring <code>let name</code>, the value of name will be <code>undefined</code></li> <li>You can specifically assign null if required, <code>let name = null</code></li> <li>Categories</li> <li>Primitive: String, Number, Boolean, null, undefined, Bigint, Symbol</li> <li>Composite or Object: Object, Array, Date</li> </ul>"},{"location":"javascript/data_types#boolean","title":"Boolean","text":"<pre><code>// Boolean\nflag = true\ninProcess = false\n</code></pre>"},{"location":"javascript/data_types#number","title":"Number","text":"<pre><code>// Integer\na = 10\n\n// Floating point number\nb = 10.25\n</code></pre>"},{"location":"javascript/data_types#string","title":"String","text":"<pre><code>// String\ntext = 'Hello World!'\ntext = \"Hello World!\"\ntext = `Hello World`\n</code></pre>"},{"location":"javascript/data_types#array","title":"Array","text":"<ul> <li>Bounded and iterable</li> <li>Can store elements with different data types (as opposed to C)</li> </ul> <pre><code>// Array\nitems = [1, 2.5, 'one', 'two', [3, 4]]\nitems[2] // 'one'\n</code></pre>"},{"location":"javascript/data_types#object","title":"Object","text":"<pre><code>// Object\nword_map = { one: 1, two: 2 }\nword_map['one'] // 1\nword_map.one // 1\n\nnumber_map = { 1: 'one', 2: 'two' }\nnumber_map[1] // 'one'\n</code></pre>"},{"location":"javascript/data_types#date","title":"Date","text":"<pre><code>new Date()\n</code></pre>"},{"location":"javascript/data_types#type-casting","title":"Type Casting","text":""},{"location":"javascript/data_types#implicit-casting","title":"Implicit Casting","text":"<ul> <li>Also known as coercion</li> <li>When a language compiler/interpreter automatically converts an object</li> <li>Python is weakly typed</li> <li>Allows automatic type conversion between unrelated data types</li> </ul> <pre><code>// Addition\n'10' + 2 = '102'\n10 + 2.5 = 12.5\n'10' + true = '10true'\n1 + true = 2\n1 + null = 1\n1 + undefined = NaN\n\n// Division\n'10' / 5 = 2\n'10.1' / 5 = 2.02\n'ab' / 2 = NaN\n\n// Subraction\n'10' - '5' = 5\n\n// Multiplication\n'10' * false = 0\n'10' * 2 = 20\n\n// Not\n!0 = true\n!1 = false\n!!0 = true\n!'' = true\n!!'' = false\n!'hello' = false\n\n// Comparision\n10 &lt; '5' // false\n5 &lt; '10' // true\n</code></pre>"},{"location":"javascript/data_types#explicit-casting","title":"Explicit Casting","text":"<ul> <li>Using built-in functions to perform explicit conversions</li> </ul> <pre><code>String(100) // '100'\nString(10.5) // '10.5'\nString([1, 2]) // '1, 2'\nString(true) // 'true'\nk.toString() // Doesn't work on numbers directly but on variables\n\nNumber('100') // 100\nNumber('10.2') // 10.2\nNumber('Hello') // Raises error\nNumber(true) // 1\nNumber(null) // 0\nparseInt('10.2') // 10\n\nBoolean(100) // true\nBoolean(0) // false\nBoolean(null) // false\nBoolean('') // false\nBoolean('hi') // true\n</code></pre>"},{"location":"javascript/operators","title":"Operators","text":""},{"location":"javascript/operators#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li>Includes regular operators like +, -, *, /</li> </ul> <pre><code>a / b // Float Division: 5 / 2 = 2.5\na % b // Modulus\na ** b // Exponent\na++ // Increment\na-- // Decrement\n</code></pre>"},{"location":"javascript/operators#logical-operators","title":"Logical Operators","text":"<pre><code>a &amp;&amp; b\na || b\n!a\n// Nullish coalescing operator\n// Returns 'b' if 'a' is null or undefined\n// Otherwise it returns 'a' even if it is false\na ?? b\n</code></pre>"},{"location":"javascript/operators#membership-operators","title":"Membership Operators","text":"<pre><code>a = 10\nb = [10, 20]\n\na in b // True\na in { 10: 'ten' } // True\na not in b // False\n</code></pre>"},{"location":"javascript/operators#identity-operators","title":"Identity Operators","text":"<pre><code>a = [10, 20]\nb = [10, 20]\nc = a\n\na is c // True\na is not b // True\n</code></pre>"},{"location":"javascript/operators#other-operators","title":"Other Operators","text":"<ul> <li>Comparison: ==, !=, ===, !===, &gt;, &lt;, &gt;=, &lt;=</li> <li>Assignment: =, +=, -=, *=, /=, etc.</li> <li>Bitwise: &amp;, |, ^, ~, &lt;&lt;, &gt;&gt;</li> </ul>"},{"location":"javascript/operators#equality","title":"Equality","text":"<pre><code>a == b // Checks only the value\n1 == 1 // true\n1 == 1.0 // true\n1 == '1' // true\n1 == true // true\n2 == true // false\nnull == undefined // true\n\na === b // Checks the value and the data type\n1 === 1 // true\n1 === 1.0 // true\n1 === '1' // false\n1 === true // false\n2 === true // false\nnull == undefined // false\n</code></pre>"},{"location":"javascript/operators#spread-operator","title":"Spread Operator","text":"<ul> <li>Spreads the entities into a container</li> </ul> <pre><code>let array = [1, 2, 'hello']\nconsole.log(array) // [1, 2, 'hello']\nconsole.log(...array) // 1 2 hello\n\n[...arr1, ...arr2] // [1, 2, 3, 4] if arr1 = [1, 2] &amp; arr2 = [3, 4]\narr2 = [...arr1] // Clones arr1 to arr2\n\nlet words = { two: 4, three: 3 }\n{ one: 1, two: 2, ...words } // { one: 1, two: 4, three: 3 }\n{ ...words, one: 1, two: 2 } // { one: 1, two: 2, three: 3 }\n</code></pre>"},{"location":"javascript/operators#rest-operator","title":"Rest Operator","text":"<ul> <li>Collects the entities into an array</li> </ul> <pre><code>(a, ...nums) =&gt; a + nums.reduce((sum, val) =&gt; sum + val, 0)\n</code></pre>"},{"location":"javascript/control_flow","title":"Control Flow","text":""},{"location":"javascript/control_flow#if-else","title":"If Else","text":"<ul> <li>Falsy values: 0, false, '', undefined, null, NaN</li> </ul> <pre><code>if (marks &lt; 30) {\n  result = 'Failed'\n} else if (marks &gt; 75) {\n  result = 'Distinction'\n} else {\n  result = 'Passed'\n}\n\n// Inline if\nif (marks &lt; 30) result = 'Failed'\nmarks &lt; 30 ? 'Failed' : 'Passed'\n\n// Short-circuit\nmarks &gt;= 30 &amp;&amp; 'Passed'\n</code></pre>"},{"location":"javascript/control_flow#match-case","title":"Match Case","text":"<pre><code>// Case values can be any literal, even list\nswitch (category) {\n  case 'A':\n    result = 'Distinction'\n    break\n  case 'B':\n    result = 'Passed'\n    break\n  case 'C':\n    result = 'Failed'\n    break\n  default:\n    result = 'Unknown'\n}\n</code></pre>"},{"location":"javascript/control_flow#loops","title":"Loops","text":""},{"location":"javascript/control_flow#for-loop","title":"For loop","text":"<pre><code>for (let i = 0; i &lt; 10; i++) {\n  console.log(i)\n}\n\nfor (index in words) {\n  console.log(words[index])\n}\n\nfor (key in data) {\n  console.log(key)\n}\n\nfor (let item of words) {\n  console.log(item)\n}\n\nfor (let [key, val] of data) {\n  console.log(key, val)\n}\n</code></pre>"},{"location":"javascript/control_flow#while-loop","title":"While loop","text":"<pre><code>while (i &lt; 10) {\n  i += 1\n}\n</code></pre>"},{"location":"javascript/control_flow#jump-statements","title":"Jump Statements","text":"<pre><code>words = ['hello', 'world']\n\n// break\n// Will print 'hello'\nfor (let item of words) {\n  if (item === 'world') break\n  console.log(item)\n}\n\n// continue\n// Will print 'world'\nfor(let item of words) {\n  if (item == 'hello') continue\n  console.log(item)\n}\n</code></pre>"},{"location":"javascript/functions","title":"Functions","text":""},{"location":"javascript/functions#function","title":"Function","text":"<pre><code>function isEven(number) {\n  return number % 2 == 0\n}\n\nisEven(4)\n</code></pre>"},{"location":"javascript/functions#pass-by-reference-or-value","title":"Pass by Reference or Value","text":"<ul> <li>Behavior of arguments depends on whether they are mutable or immutable</li> </ul>"},{"location":"javascript/functions#immutable-arguments","title":"Immutable Arguments","text":"<ul> <li>If the passed object is immutable (like numeric), arguments are pass by value</li> <li>Changing their value creates a new object in memory and leaves the original variable unchanged</li> </ul> <pre><code>function process(value) {\n  value = value + 1\n  console.log(value) // 11\n}\n\nlet value = 10\nprocess(value)\nconsole.log(value) // 10\n</code></pre>"},{"location":"javascript/functions#mutable-arguments","title":"Mutable Arguments","text":"<ul> <li>If the passed object is mutable, arguments are pass by reference</li> <li>Since variable is a reference to the object in memory</li> </ul> <pre><code>function process(array) {\n  array.push(3)\n  console.log(array) // [1, 2, 3]\n}\n\narray = [1, 2]\nprocess(array)\nconsole.log(array) // [1, 2, 3]\n</code></pre>"},{"location":"javascript/functions#arguments","title":"Arguments","text":"<pre><code>// Positional arguments\n// Required by the function in correct positional order\nfunction process(val1, val2) {\n  console.log(val1, val2)\n}\n\n// Default arguments\n// Default value is used if no value is passed\nfunction process(val1 = 5) {\n  console.log(val1)\n}\n\nfunction process(val1 = 5, val2) {\n  console.log(val1, val2)\n}\n// If the default argument occurs at the beginning, we need to specify its value\n// Pass undefined to specify to use the default value\nprocess(undefined, 10) // 5 10\n\n// Arbitrary arguments\n// Variable number of arguments\n// Should be used after positional arguments\nfunction add(...args) {\n  return args.reduce((sum, x) =&gt; sum + x, 0)\n}\nadd(10, 20, 30, 40)\n</code></pre>"},{"location":"javascript/functions#function-hoisting","title":"Function Hoisting","text":"<ul> <li>Function declarations are moved to the top of their local scope before execution</li> <li>Default behavior of javascript, though not advisable</li> <li>Only declaration is hoisted, not the initialization of its variables</li> </ul> <pre><code>add(10, 20) // 30\nfunction add(a, b) { return a + b }\n</code></pre>"},{"location":"javascript/anonymous_functions","title":"Anonymous Functions","text":""},{"location":"javascript/anonymous_functions#function-expression","title":"Function Expression","text":"<ul> <li>Doesn't support hoisting</li> </ul> <pre><code>// Calling add(10, 20) before declaration will raise error since hoisting is not supported\nconst add = function (a, b) { return a + b }\nadd(10, 20)\n\nconst student = {\n  name: 'John Wick',\n  printName: function() { console.log(this.name) }\n}\nstudent.printName() // John Wick\n\n// Self invoking function\n// All variables in such functions are private, limited to the function scope\n(function(text) {\n  console.log(text)\n})('hello')\n</code></pre>"},{"location":"javascript/anonymous_functions#arrow-function","title":"Arrow Function","text":"<ul> <li>Doesn't have its own binding to 'this', 'arguments' or 'super'</li> <li>Should only be used for non-method functions</li> <li>Because arrow functions don't have their own 'this'</li> <li>Refer 'this' keyword topic</li> </ul> <pre><code>const printer = (text = 'hello') =&gt; { console.log(text) }\nconst add = (a, b) =&gt; { return a + b }\nconst add = (a, b) =&gt; a + b // Directly returns the value\nconst data = (text) =&gt; ({ message: text }) // Directly returns the hash\n</code></pre>"},{"location":"javascript/function_context_and_closure","title":"Function Context And Closure","text":""},{"location":"javascript/function_context_and_closure#function-context","title":"Function Context","text":"<ul> <li>In javascript, 'this' is a special keyword that is used within functions</li> <li>To refer to the object on which the function is invoked</li> <li>The value of 'this' depends on how a function is defined and called</li> </ul>"},{"location":"javascript/function_context_and_closure#call","title":"Call","text":"<ul> <li>Helps to manipulate 'this' value of a function</li> </ul> <pre><code>// thisObject controls the context for the fucntion\n// It is the object whose properties need to be accessed using 'this'\nfunc.call(thisObject, ...args)\n\nfunction printer() { console.log(this.name) }\nconst person1 = { name: 'John Wick' }\nconst person2 = { name: 'Tom Cruise' }\nprinter.call(person1) // John Wick\nprinter.call(person2) // Tom Cruise\n\n// Function in object\nconst student1 = {\n  name: 'John Wick',\n  printName: function() { console.log(this.name) }\n}\nconst student2 = { name: 'Tom Cruise' }\nstudent1.printName() // John Wick\nstudent1.printName.call(student2) // Tom Cruise\n</code></pre>"},{"location":"javascript/function_context_and_closure#apply","title":"Apply","text":"<ul> <li>Similar to call(), but takes args in an array</li> </ul> <pre><code>func.apply(thisObject, [...args])\n</code></pre>"},{"location":"javascript/function_context_and_closure#bind","title":"Bind","text":"<ul> <li>Helps to manipulate 'this' value of a function without invoking it immediately</li> </ul> <pre><code>// args are optional arguments that will prepended to the arguments\n// They will be partially applied when the function is invoked\nfunc.bind(thisObject, ...args)\n\nfunction printer() { console.log(this.name) }\nconst person = { name: 'John Wick' }\nconst printName = printer.bind(person)\nprintName() // John Wick\n</code></pre>"},{"location":"javascript/function_context_and_closure#closures","title":"Closures","text":"<ul> <li>Allows nested functions to access variables defined in the scope of parent function</li> <li>Even if the execution of the parent function is finished</li> <li>Combination of the function and its lexical environment</li> <li>Allows an inner function to access the outer function scope</li> <li>Lexical Scoping</li> <li>Concept in which the scope of the variables is determined at the compilation</li> <li>Based on the structure of the code</li> </ul> <pre><code>function outer(val1) {\n  function inner(val2) {\n    console.log(val1, val2)\n  }\n  inner('world')\n}\nouter('hello') // hello world\n\nfunction outer(val1) {\n  return function inner(val2) {\n    console.log(val1, val2)\n  }\n}\nconst func = outer('hello')\nfunc('world') // hello world\n\nfunction setCounter() {\n  let counter = 10\n  return function count() {\n    counter -= 1\n    console.log(counter)\n  }\n}\nconst func = setCounter()\n// Execution of outer function is finished\n// Still the nested function can access the outer scope\nfunc() // 9\nfunc() // 8\nfunc() // 7\n</code></pre>"},{"location":"javascript/iterators","title":"Iterators","text":""},{"location":"javascript/iterators#iterators","title":"Iterators","text":"<pre><code>array.every((x) =&gt; x % 2 == 0) // Equivalent to all?\narray.some((x) =&gt; x % 2 == 0) // Equivalent to any?\n\n// Performs operation on each item and returns the original array\narray.forEach((x) =&gt; console.log(x))\n\n// Manipulates each item and returns the new values of array\narray.map((x) =&gt; x * 2)\n\n// Selects the items and returns a new array with those items\narray.filter((x) =&gt; x % 2 == 0)\n\n// Finds and returns the first matched value\narray.find((x) =&gt; x = 'hello')\n// findIndex, findLast, findLastIndex\n\n// Aggregates the values into a variable\n// Need to return the aggregator\narray.reduce((sum, x) =&gt; sum += x, 0)\narray.reduce((sum, x) =&gt; sum += x, 5) // initial value of sum will be 5\n</code></pre>"},{"location":"javascript/modules","title":"Modules","text":""},{"location":"javascript/modules#mixins","title":"Mixins","text":"<ul> <li>Allows to add properties of other objects or classes</li> <li>Extends the functionality of target object</li> <li>Each object contains a built-in property called prototype</li> <li>Prototype is itself an object and will have its own prototype property</li> <li>Prototype chain helps to inherit properties and methods from other objects</li> <li><code>Object.assign(target, object)</code></li> </ul> <pre><code>const target = {\n  name: 'parent',\n  printMessage() { console.log('hello') }\n}\n\nconst object = {\n  printText() { console.log('world') }\n}\n\nObject.assign(target, object)\ntarget.printMessage() // hello\ntarget.printText() // world\n\n// Refer Multiple Inhertiance in OOP Classes\n</code></pre>"},{"location":"javascript/modules#proxies","title":"Proxies","text":"<ul> <li>Objects that allow to wrap an object and customize the fundamental operations</li> <li>Like getting and setting object operations</li> <li>Useful to add custom validations and access control</li> <li>Also used to implement features like logging, caching, securities</li> <li><code>new Proxy(target, handler)</code></li> </ul> <pre><code>const person = { name: 'Tom Cruise', dept: 'Finance' }\nconst handler = {\n  get: (obj, prop) =&gt; obj[prop],\n  set: (obj, prop, value) =&gt; { obj[prop] = value }\n}\n\nconst personProxy = new Proxy(person, handler)\nconsole.log(personProxy.name)\nconsole.log(personProxy.dept)\n</code></pre>"},{"location":"javascript/modules#modules","title":"Modules","text":"<pre><code>// module.js\nexport const text = 'hello'\nexport const printMessage = () =&gt; {\n  console.log('hello world')\n}\nclass Student {}\n\n// target.js\nimport { text, printMessage, Student } from './module.js'\nprintMessage()\n\n// Default Export\n\n// module.js\nexport const text = 'hello'\nexport default () =&gt; {\n  console.log('hello world')\n}\n\n// target.js\nimport printMessage from './module.js'\nprintMessage()\n\n// Explicit Export\n\n// module.js\nconst text = 'hello'\nconst printMessage = () =&gt; {\n  console.log('hello world')\n}\nclass Student {}\n\nexport { text, printMessage }\nexport default Student\n\n// target.js\nimport Student from './module.js'\nnew Student()\n\n// Import all\n\nimport * as Shape from './shape.js'\nShape.area()\n</code></pre>"},{"location":"javascript/classes","title":"Classes","text":""},{"location":"javascript/classes#classes","title":"Classes","text":"<pre><code>// Class Declaration\nclass Employee {\n  constructor(name) {\n    this.name = name\n  }\n}\n\n// Class Expression\nconst Employee = class {\n  constructor(name) {\n    this.name = name\n  }\n}\n\n// Function Class\nfunction Employee(name) {\n  this.name = name\n}\n\nconst emp = new Employee('John Wick')\n</code></pre>"},{"location":"javascript/classes#instance-methods","title":"Instance Methods","text":"<pre><code>class Employee {\n  // Instance Variables\n  dept = 'Finance'\n\n  // Constructor\n  constructor(name, age) {\n    // Instance Variables\n    this.name = name\n    this.age = age\n  }\n\n  // Instance Methods\n  displayName(this) {\n    console.log(this.name)\n  }\n}\n\nemp = new Employee('John Wick', 25)\nemp.name\nconsole.log(emp) // { name: 'John Wick', age: 25 }\n</code></pre>"},{"location":"javascript/classes#static-or-class-methods","title":"Static or Class Methods","text":"<ul> <li>Doesn't require instance of class for execution</li> <li>Better performance than regular class methods due to memory optimization</li> </ul> <pre><code>class Employee {\n  static dept = 'Finance'\n\n  static displayDept() {\n    console.log(this.dept)\n  }\n}\nEmployee.displayDept()\n</code></pre>"},{"location":"javascript/classes#access-modifiers","title":"Access Modifiers","text":"<ul> <li>Public: name</li> <li>Protected: _name</li> <li>Private: #name</li> </ul> <pre><code>class Employee {\n  // Private attributes need to be declared outside constructor\n  #dept\n  static #text = 'hello'\n\n  constructor(name, dept) {\n    this.name = name // Public Attribute\n    this.#dept = dept // Private Attribute\n  }\n\n  // Private Method\n  #displayDept() {\n    console.log(this.#dept)\n  }\n\n  // Static Method accessing private attribute\n  static displayText() {\n    console.log(this.#text)\n  }\n}\n</code></pre>"},{"location":"javascript/classes#getter-and-setter","title":"Getter and Setter","text":"<pre><code>class Employee {\n  #name\n  #age\n\n  constructor(name, age) {\n    this.#name = name\n    this.#age = age\n  }\n\n  get name() {\n    return this.#name\n  }\n\n  set name(name) {\n    // Can add validations &amp; processing\n    this.#name = name\n  }\n}\n\nemp = new Employee('John Wick', 25)\nemp.name\nemp.name = 'Tom Cruise'\n</code></pre>"},{"location":"javascript/classes#nested-classes","title":"Nested Classes","text":"<ul> <li>Not directly supported</li> <li>Can be assigned as attribute, but cannot be used in constructor</li> </ul>"},{"location":"javascript/oop_classes","title":"Oop Classes","text":""},{"location":"javascript/oop_classes#inheritance","title":"Inheritance","text":"<pre><code>class Parent {\n  constructor(name) {\n    this.name = name\n  }\n}\n\nclass Child extends Parent {\n  constructor(name) {\n    super(name)\n    this.dept = 'Finance'\n  }\n}\n\nclass AnotherChild extends Parent {\n  constructor(dept, name) {\n    super(name)\n    this.dept = dept\n  }\n}\n\nparent = new Parent('John Wick')\n\n// Multiple Inheritance\n// Not Supported, can be emulated using mixins\n// This is because each object can have only one prototype in javascript\n// Prototype is a property that allows to share methods across all instances\n\n// Multiple Inheritance Using Object\nconst student = {\n  class: 'X',\n  printText() { console.log('hello' ) }\n}\nObject.assign(Child.prototype, student)\nObject.assign(Child.prototype, student, profile, ...)\n\nchild = new Child('John Wick')\nchild.class // X\nchild.printText() // Hello\n\n// Multiple Inheritance Using Class\nclass Entity {\n  hello () { console.log('Hello') }\n}\n\nclass Human extends Entity {\n  walk () { console.log('Walk') }\n}\n\nfunction Athelete(Parent) {\n  return class extends Parent {\n    exercise () { console.log('Exercise') }\n  }\n}\nclass Swimmer extends Athelete(Human) {}\n\nconst swimmer = new Swimmer()\nswimmer.hello()\nswimmer.walk()\nswimmer.exercise()\n</code></pre>"},{"location":"javascript/oop_classes#abstraction","title":"Abstraction","text":"<ul> <li>No specific abstract class or method</li> <li>Can be implemented using inheritance and error handling</li> </ul> <pre><code>class Shape {\n  draw () {\n    throw new Error('Not implemented')\n  }\n}\n\n// Concrete Classes\nclass Circle extends Shape {\n  draw () {\n  }\n}\n\nclass Rectange extends Shape {\n  draw () {\n  }\n}\n</code></pre>"},{"location":"javascript/oop_classes#polymorphism","title":"Polymorphism","text":"<pre><code>// Method Overriding\nclass Parent {\n  display () {\n    console.log('Parent')\n  }\n}\n\nclass Child extends Parent {\n  display () {\n    console.log('Child')\n  }\n}\n\nclass AnotherChild extends Parent {\n  display (text) {\n    super.display() // To call parent method if required\n    console.log(text)\n  }\n}\n\n// Method Overloading\n// Not supported\n</code></pre>"},{"location":"javascript/oop_classes#encapsulation","title":"Encapsulation","text":"<pre><code>class Employee {\n  #name\n\n  constructor(name) {\n    this.#name = name\n  }\n}\n\nemp = Employee('Tom Cruise')\n// Raises error\n// Private attributes are encapsulated\nemp.name\nemp.#name\n\n// Can also be achieved using nested functions\n// Scope of outer function is accessible to inner function only\n</code></pre>"},{"location":"javascript/error_handling","title":"Error Handling","text":""},{"location":"javascript/error_handling#errors","title":"Errors","text":"<ul> <li>Syntax errors</li> <li>Logical errors: Output doesn't match the expectation</li> <li>Runtime error or exception</li> <li>An event occuring during the execution disrupts the normal flow</li> </ul> <pre><code>throw('error message')\nthrow new Error('error message') // Error is generic error class\n// SyntaxError, ReferenceError, etc.\n</code></pre>"},{"location":"javascript/error_handling#try-block","title":"Try Block","text":"<pre><code>try {\n  // Perform operations\n} catch (e) {\n  // Handle exception\n  console.log(e.name)\n  console.log(e.message)\n} finally {\n  // Must execute whether an exception is raised or not\n}\n</code></pre>"},{"location":"javascript/error_handling#custom-exceptions","title":"Custom Exceptions","text":"<pre><code>class CustomError extends Error {\n  constructor(message, status) {\n    super(message)\n    this.status = status\n  }\n}\n\nfunction CustomError(message, name) {\n  this.message = message\n  this.name\n}\nCustomError.prototype = Error.prototype\n</code></pre>"},{"location":"javascript/this_keyword","title":"This Keyword","text":""},{"location":"javascript/this_keyword#this","title":"This","text":"<ul> <li>Contains reference to an object, useful to access methods &amp; properties</li> <li>Represents the context of a function or current code</li> </ul> <pre><code>// Global scope\n// Refers to 'window' object\nvar num = 10\nconsole.log(this.num) // 10\n</code></pre>"},{"location":"javascript/this_keyword#regular-functions","title":"Regular Functions","text":"<pre><code>// this refers the object that the function is accessed on\nfunction print() { console.log(this.name) }\nconst stu1 = { name: 'stu1' }\nconst stu2 = { name: 'stu2' }\nstu1.print = print\nstu2.print = print\n\nstu1.print // stu1\nstu2.print // stu2\n\n// Changes based on how function is called\nconst stu1 = { name: 'stu1', print() { console.log(this.name) } }\nconst stu2 = { name: 'stu2' }\nstu2.print = stu1.print\nstu2.print // stu2\n\n// Here the inner function is being called from the global object\n// Where name is not defined\n// Can use arrow function instead\nconst student = {\n  name: 'Tom Cruise',\n  print() {\n    return function () { console.log(this.name) }\n  }\n}\ninner = student.print()\ninner() // undefined\n\n// In this case, although inner() is inside print() function\n// But it is executing on global object\n// While print is executing on student object: student.print()\nconst student = {\n  name: 'Tom Cruise',\n  dept: 'Finance',\n  print() {\n    console.log(this.dept)\n    function inner() { console.log(this.name) }\n    inner()\n  }\n}\ninner = student.print() // Finance, undefined\n</code></pre>"},{"location":"javascript/this_keyword#arrow-functions","title":"Arrow Functions","text":"<pre><code>// Cannot be used as methods\nconst student = {\n  name: 'Tom Cruise',\n  print1: function() { console.log(this.name) },\n  print2: () =&gt; { console.log(this.name) }\n}\nstudent.print1() // this refers to student, so prints Tom Cruise\nstudent.print2() // this refers to global object, so prints nothing\n\n// Useful in inner functions which are executed on global object\n// Using regular function here will print undefined\nconst student = {\n  name: 'Tom Cruise',\n  print() {\n    const inner = () =&gt; { console.log(this.name) }\n    inner()\n  }\n}\nstudent.print() // Tom Cruise\n\n// A class's body has this context\n// So arrow functions will correctly point to the instance or static fields\n// And because it's a closure and not the function's own binding,\n// the value of this won't change based on execution context\nclass Employee {\n  dept = 'Finance'\n  printDept = () =&gt; { console.log(this.dept) }\n}\nconst emp = new Employee()\nemp.printDept() // Finance\n\nconst { printDept } = emp\nprintDept() // Finance\n</code></pre>"},{"location":"javascript/this_keyword#classes","title":"Classes","text":"<pre><code>// Refers to the instance object\nclass Student {\n  constructor(name) {\n    this.name = name\n    this.dept = dept\n  }\n\n  displayName() {\n    console.log(this.name)\n  }\n\n  displayDept = () =&gt; {\n    console.log(this.dept)\n  }\n}\nconst student = new Student('Tom Cruise', 'Finance')\nstudent.name // Tom Cruise\nstudent.dept // Finance\nstudent.displayName() // Tom Cruise\nstudent.displayDept() // Finance\n\n// In event handler\n// this refers to the element on which event is executed\n</code></pre>"},{"location":"javascript/promises","title":"Promises","text":""},{"location":"javascript/promises#promise","title":"Promise","text":"<ul> <li>Object representing the eventual completion or failure of async operation</li> <li>Returned object on which callbacks are attached instead of passing them</li> <li>It is in one of these states: pending, fulfilled, rejected</li> </ul> <pre><code>function successCallback(result) {}\nfunction failureCallback(error) {}\n\n// Without Promise: Passing callbacks\nasyncOperation(data, successCallback, failureCallback)\n// With Promise: Attaching callbacks\nasyncOperation(data).then(successCallback, failureCallback)\n</code></pre>"},{"location":"javascript/promises#chaining","title":"Chaining","text":"<ul> <li>Passing callbacks can become complicated for chained async operations</li> </ul> <pre><code>// Without Promise\noperation1(function(result1) {\n  operation2(result2, function(result2) {\n    operation3(result3, function(result3) {\n      // Processing\n    }, failureCallback)\n  }, failureCallback)\n}, failureCallback)\n\n// With Promise\noperation1()\n  .then(function(result1) {})\n  .then(function(result2) {})\n  .then(function(result2) {})\n  .catch(failureCallback)\n  .finally(function() {})\n\noperation()\n  .then((url) =&gt; fetch(url))\n  .then((res) =&gt; res.json())\n  .then((data) =&gt; { dataArray.push(data) })\n  .then(() =&gt; { console.log(dataArray) })\n  .catch(failureCallback)\n  .finally(() =&gt; {})\n</code></pre>"},{"location":"javascript/promises#asyc-and-await","title":"Asyc and Await","text":"<pre><code>async function doSometing() {\n  try {\n    const url = await operation()\n    const res = await fetch(url)\n    const data = await res.json()\n    dataArray.push(data)\n    console.log(dataArray)\n  } catch (e) {\n    failureCallback(e)\n  }\n}\n</code></pre>"},{"location":"javascript/promises#creating-promises","title":"Creating Promises","text":"<pre><code>new Promise((resolve, reject) =&gt; {\n  try {\n    value = doSomething()\n    resolve(value)\n  } catch (e) {\n    reject(e.message)\n  }\n})\n</code></pre>"},{"location":"javascript/promises#then","title":"Then","text":"<pre><code>then(onFulfilled)\nthen(onFulfilled, onRejected)\n\npromise\n  .then((value) =&gt; {\n    console.log(`Success: ${value}`)\n  })\n\npromise\n  .then(\n    (value) =&gt; { console.log(`Success: ${value}`) },\n    (reason) =&gt; { console.log(`Failure: ${reason}`) }\n  )\n</code></pre>"},{"location":"javascript/data_classes/numbers","title":"Numbers","text":""},{"location":"javascript/data_classes/numbers#numbers","title":"Numbers","text":"<ul> <li>Immutable</li> </ul> <pre><code>toFixed(x) // Shows x digits after decimal\ntoPrecision(x) // Shows x digits including both before and after decimal\ntoString()\n\nisInteger()\nNumber()\nparseInt()\nparseFloat()\n</code></pre>"},{"location":"javascript/data_classes/numbers#math","title":"Math","text":"<pre><code>Math.abs(x)\nMath.max(x, y, ...)\nMath.min(x, y, ...)\nMath.pow(x, y)\nMath.round(x) // Rounds to nearest integer\nMath.sqrt(x)\nMath.pow(x, y)\nMath.ceil(x)\nMath.floor(x)\n</code></pre>"},{"location":"javascript/data_classes/numbers#random","title":"Random","text":"<pre><code>Math.random() // Random float between 0 and 1\nmin + Math.random() * (max - min) // Random element between start &amp; stop\n</code></pre>"},{"location":"javascript/data_classes/strings","title":"Strings","text":""},{"location":"javascript/data_classes/strings#strings","title":"Strings","text":"<ul> <li>Immutable</li> <li>Cannot be modified in-place once stored in a memory location</li> <li>New characters cannot be appended or inserted</li> <li>Any changes will create a new string object</li> </ul> <pre><code>text = 'hello'\ntext[1] // 'e'\ntext + 'world' // 'hello world'\ntext * 3 // Not supported: NaN\n\ntext = \"Hello World!\"\ntext = `Hello`\npara = `Multiline\nString`\n\n'hello'.includes('el') // true\n\n'hello\\nworld' // Adds new line\n</code></pre>"},{"location":"javascript/data_classes/strings#slicing","title":"Slicing","text":"<pre><code>// From left, the indexes are 0, 1, 2, ...\n// From right, the indexes are ..., -3, -2, -1\n// Slicing: string.slice(startIndex, endPosition)\n// endPosition = endIndex + 1\n\ntext = 'hello world'\ntext.slice(5) // 'world'\ntext.slice(-6) // 'world'\n\ntext.slice(2, 5) // 'llo'\ntext.slice(-5, -2) // 'wor'\ntext.slice(6, -2) // 'wor'\n</code></pre>"},{"location":"javascript/data_classes/strings#instance-methods","title":"Instance Methods","text":"<ul> <li>Applied on string like <code>string.methodName(...args)</code></li> </ul> <pre><code>length()\n\n// Find and replace\nsearch(strOrRegex) // Returns index if found else -1\nindexOf(substr) // Returns index if found else -1\nindexOf(substr, startIndex)\n// lastIndexOf\nreplace(strOrRegex, newStr) // replaceAll\nincludes(subStr)\nsubstring(startIndex)\nsubstring(startIndex, endIndex)\n\n// Prefix &amp; Suffix\nstartsWith(prefix)\nstartsWith(prefix, endPosition) // endPosition = endIndex + 1\nendsWith(suffix)\nendsWith(suffix, endPosition) // endPosition = endIndex + 1\n\n// Split and Join\ntrim() // Removes trailing whitespaces\n// trimStart(), trimEnd()\nsplit(delimiter) // Deletes delimiter, splits and returns list of subsrings\nsplit(delimiter, limit)\narray.join(str)\n\n// Case\ntoLowerCase()\ntoUpperCase()\n</code></pre>"},{"location":"javascript/data_classes/arrays","title":"Arrays","text":""},{"location":"javascript/data_classes/arrays#array","title":"Array","text":"<ul> <li>Mutable: Any item can be modified, removed or added</li> <li>The elements can be of any data type (unlike C, C++, Java)</li> </ul> <pre><code>let subjects = ['Physics', 'Chemistry', 'Maths']\nlet items = [25.50, True, -50, 1+2j, 'Physics']\nlet items = Array(10, 2.5, ...)\nlet items = Array(2) // Array of length two will undefined values\n\n[1, 2] + [3, 4] // 1, 23, 4\n[1, 2].concat([3,4]) // [1, 2, 3, 4]\n[5] * 4 // 20\n[...Array(5).keys] // [0, 1, 2, 3, 4]\nArray.from(Array(5), (x,i) =&gt; i * 2) // [0, 2, 4, 6, 8]\nArray.from(Array(5), (x,i) =&gt; (10 + i) * 2) // [20, 22, 24, 26, 28]\n</code></pre>"},{"location":"javascript/data_classes/arrays#accessing","title":"Accessing","text":"<pre><code>subjects[1] // 'Chemistry'\nsubjects[1] = 'Statistics'\ndelete subjects[1] // ['Physics', undefined, 'Maths']\n[1, 2, 3].includes(2) // true\n</code></pre>"},{"location":"javascript/data_classes/arrays#destructuring","title":"Destructuring","text":"<pre><code>let [x, y] = [1, 2] // x = 1, y = 2\nlet [x, ...y] = [1, 2, 3] // x = 1, y = [2, 3]\n// let [x, ...y, z] = [1, 2, 3, 4] raises error\n\nconst [name, age] = ['Tom Cruise', 25, 'Finance']\nconst [name, , dept] = ['Tom Cruise', 25, 'Finance']\nconst [name, [age, dept]] = ['Tom Cruise', [25, 'Finance']]\n\nconst [name, ...attributes] = = ['Tom Cruise', 25, 'Finance']\nconst [message = 'hello'] = [] // Default\n[b, a] = [a, b] // Swapping: a &amp; b are already defined\n\n// Functions\nconst sum = ([num1, num2, num3]) =&gt; num1 + num2 + num3\nconst [name, dept] = processData()\n</code></pre>"},{"location":"javascript/data_classes/arrays#slicing","title":"Slicing","text":"<pre><code>// From left, the indexes are 0, 1, 2, ...\n// From right, the indexes are ..., -3, -2, -1\n// Slicing: array.slice(startIndex, endIndex)\n\nlet num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnum.slice(6) // [7, 8, 9, 10]\nnum.slice(-4) // [7, 8, 9, 10]\n\nnum.slice(2, 5) // [3, 4, 5]\nnum.slice(-5, -2) // [6, 7, 8]\nnum.slice(6, -2) // [7, 8]\n</code></pre>"},{"location":"javascript/data_classes/arrays#instance-methods","title":"Instance Methods","text":"<pre><code>// Iterated like iterator.next()\n// Which returns { value: [index, item], done: false }\nentries() // Iterator with key-value (index-item) pairs\nkeys() // Interator with key (index)\nvalues() // Interator with values (items)\nlength()\nflat() // [1, [2], [[3, 4]]].flat() returns [1, 2, [3, 4]]\njoin(str)\n// Refer iterators\n\n// Insert\npush(...elements) // Add elements at the end\nunshift(...elements) // Add elements at the beginning\n// Inserts or replaces contents\n// splice(2, 0, 10) inserts 10 at index 2\n// splice(2, 1, 10, 20) removes 1 item from index 2 and inserts 10, 20\n// splice(2, 4, 10, 20) removes 4 items from index 2 and inserts 10, 20\nsplice(startIndex, deleteCount, ...items) // New array\ntoSpliced(startIndex, deleteCount, ...items) // In place\n\n// Remove\npop() // Removes last item\npop(index) // Removes item at index\nshift() // Removes first item\n\n// Find\n// Using iterators: find, findIndex, findLastIndex\ncount(obj) // Count of occurences of obj\nindexOf(obj) // Lowest index where obj occurs\n// lastIndexOf\n\nreverse() // In place\ntoReversed() // New array\nsort() // In place\nsort(compareFn) // compareFn = (a, b) =&gt; { a == b ? 0 : (a &lt; b ? -1 : 1) }\ntoSorted() // In place\ntoSorted(compareFun) // In place\n</code></pre>"},{"location":"javascript/data_classes/objects","title":"Objects","text":""},{"location":"javascript/data_classes/objects#objects","title":"Objects","text":"<pre><code>let subjects = { phy: 'Physics', chem: 'Chemistry', math: 'Mathematics' }\nlet numbers = { 1: 'one', 2: 'two' } // Converted to string keys: { '1': 'one', ... }\n\nlet [a, b, c] = ['hello', 10, {}]\nlet obj = { a, b, c } // { a: 'hello', b: 10, c: {} }\nObject.fromEntries([['a', 100], ['b', 200]]) // { 'a': 100, 'b': 200 }\n\nconst student = {\n  name: 'John Wick',\n  dept: '',\n  [`prop${value}`]: 'hello',\n  printName: function() { console.log(this.name) },\n  printDept() { console.log(this.dept) }\n}\nstudent.printName()\nstudent.printDept()\n\n{ ...student1, ...details1 }\n</code></pre>"},{"location":"javascript/data_classes/objects#accessing","title":"Accessing","text":"<pre><code>subjects['phy'] // 'Physics'\nsubjects.phy // 'Physics'\n\nsubjects['math'] = 'Algebra'\nsubjects.stat = 'Statistics'\ndelete subjects.math\nObject.freeze(subjects)\n\nfor (code in subjects) {\n  console.log(code)\n}\n\nObject.entries(subjects).forEach(([code, name]) =&gt; {\n  console.log(code, name)\n})\n</code></pre>"},{"location":"javascript/data_classes/objects#destructuring","title":"Destructuring","text":"<pre><code>const { name, age } = { name: 'Tom Cruise', age: 25, dept: 'Finance' }\nconst { name: { first, last }, dept } = { name: { first: 'Tom', last: 'Cruise'}, age: 25 }\nconst { name, ...attributes } = { name: 'Tom Cruise', age: 25, dept: 'Finance' }\n\n// Renaming &amp; Defaults\nconst { message = 'hello' } = obj\nconst { message: text } = obj\nconst { message: text = 'hello' } = obj\n\n// Functions\nconst sum = ({ num1, num2, num3 }) =&gt; num1 + num2 + num3\nconst { name, dept } = processData()\n</code></pre>"},{"location":"javascript/data_classes/objects#instance-methods","title":"Instance Methods","text":"<pre><code>Object.keys(obj)\nObject.values(obj)\nObject.entries(obj) // Array of key-value pairs\nObject.groupBy(obj, callbackFn)\n</code></pre>"},{"location":"javascript/modules/date","title":"Date","text":""},{"location":"javascript/modules/date#date","title":"Date","text":"<pre><code>new Date() // Current date &amp; time\nnew Date(datestring)\nnew Date(year, month, date)\nnew Date(year, month, date, hour, minute, second, millisec)\nnew Date(epoch_secs)\n</code></pre>"},{"location":"javascript/modules/date#instance-methods","title":"Instance Methods","text":"<pre><code>// 0 is Sunday\ngetDay() // getDate, getMonth, getYear, getFullYear\ngetHours() // getMinutes, getSeconds\nsetDay() // setDate, setMonth, setYear, setFullYear\nsetHours() // setMinutes, setSeconds\n\ngetUTCDay() // getUTCDate, getUTCMonth, getUTCYear, getUTCFullYear\nsetUTCDay() // setUTCDate, setUTCMonth, setUTCYear, setUTCFullYear\n\ntoString() // toISOString, toUTCString\ntoDateString() // Thu Apr 12 2018\ntoTImeString()\n</code></pre>"},{"location":"javascript/web_api/introduction","title":"Introduction","text":""},{"location":"javascript/web_api/introduction#web-api","title":"Web API","text":"<ul> <li>Browser API developed on top of the core javascript</li> </ul>"},{"location":"javascript/web_api/introduction#storage-api","title":"Storage API","text":"<ul> <li>Can be used to store till 5 MB (as opposed to 4 KB per cookie)</li> <li>Can be accessed by the client only (cookie by both client &amp; server)</li> <li>Fully secured (as opposed to cookie which is vulnerable to stealing)</li> <li>localStorage: Never expires</li> <li>sessionStorage: expires when the browser tab is closed</li> </ul> <pre><code>// The same methods apply to sessionStorage\nlocalStorage.setItem(key, value)\nlocalStorage.getItem(key)\nlocalStorage.removeItem(key)\nlocalStorage.clear()\n</code></pre>"},{"location":"javascript/web_api/introduction#forms-api","title":"Forms API","text":"<ul> <li>Used to perform client-side form validation</li> </ul> <pre><code>// DOM Properties\n// Contains multiple properties to perform a particular validation\n// customError, valueMissing, rangeOverflow, rangeUnderflow, tooLong\n// patternMismatch, stepMismatch, typeMismatch\n// valid (boolean to indicate if valid or not)\nelement.validity\nelement.validationMessage\n\n// DOM Methods\nelement.checkValidity() // Checks if the input value is valid\nelement.setCustomValidity(message) // Sets custom message for validation of the input\n</code></pre>"},{"location":"javascript/web_api/introduction#worker-api","title":"Worker API","text":"<ul> <li>Allows to run javascript code in a background thread</li> <li>Allows to interact with web page without loading the whole JS code</li> <li>Increases the response time of the web page</li> <li>Used in parallel downloads, background data synchronization</li> <li>Generating reports, processing audio &amp; video</li> <li>Cannot use these objects: window, document, parent</li> </ul> <pre><code>&lt;div&gt;\n  &lt;button onclick=\"startWorker()\"&gt;Start Counter&lt;/button&gt;\n  &lt;button onclick=\"stopWorker()\"&gt;Stop Counter&lt;/button&gt;\n&lt;/div&gt;\n&lt;div id=\"output\"&gt;\n&lt;/div&gt;\n&lt;script&gt;\n  let output = document.getElementById('output')\n  let workerObj\n\n  function startWorker() {\n    if (typeof workerObj !== undefined) return\n    workerObj = new Worker('textWorker.js')\n    // To get the message in main thread from the worker file\n    // Which is sent using postMessage method, onmessage event is used\n    workerObj.onmessage = function (e) {\n      output.innerHTML += `Event: ${event.data}&lt;br&gt;`\n    }\n  }\n\n  function stopWorker() {\n    workerObj?.terminate()\n    workerObj = undefined\n  }\n\n  let = i\n  function counter () {\n    i += 1\n    postMessage(data) // To send data to the main thread\n    setTimeout('counter()', 1000)\n  }\n  counter()\n&lt;/script&gt;\n</code></pre>"},{"location":"javascript/web_api/introduction#fetch-api","title":"Fetch API","text":"<ul> <li>Allows a browser to make HTTP request to a web server</li> </ul> <pre><code>// Using Promise\n// Options object contains method (GET, PATCH, POST), headers, body, etc.\nfetch(URL, options)\n  .then(res =&gt; res.json())\n  .then(data =&gt; {\n    let output = document.getElementById('output')\n    output.innerHTML += JSON.stringify(data)\n  })\n  .catch(error =&gt; {})\n\n// Using Await\nlet res = await fetch(URL, options)\nlet data = await res.json()\nlet output = document.getElementById('output')\noutput.innerHTML += JSON.stringify(data)\n</code></pre>"},{"location":"javascript/web_api/introduction#geolocation-api","title":"Geolocation API","text":"<pre><code>// Properties\ncoords\ncoords.latitude // longitude, altitude, accuracy, altitudeAccuracy, heading, speed\n\n// Methods\n// Current geographic location of user\ngetCurrentPosition(successCallback, errorCallback, options)\n// User's live location\nwatchPosition(successCallback, errorCallback, options)\nclearWatch(id) // Clear ongoing watch\n</code></pre>"},{"location":"javascript/web_api/dom","title":"Dom","text":""},{"location":"javascript/web_api/dom#browser-object-model-bom","title":"Browser Object Model (BOM)","text":"<ul> <li>Refers to the objects provided by the browsers to interact with them</li> <li>By using these objects, browser functionality can be manipulated</li> <li>For example, browser history, window size, navigating to urls</li> <li>It is not standardized and depends on the browser in use</li> </ul>"},{"location":"javascript/web_api/dom#document-object-model-dom","title":"Document Object Model (DOM)","text":"<ul> <li>HTML DOM allows javascript to access and modify the content of HTML elements</li> <li>It is a subset of Browser Object Model (BOM)</li> <li>That is standardized and is specific to the current HTML document</li> <li>Mainly focuses on the structure of the displayed document</li> <li>Defines the logical or tree-like structure of the document</li> <li>In the tree, each branch ends in a node and each node contains objects</li> <li>DOM methods allows programmatic access to the tree</li> <li>And allows to change the document's structure, content or style</li> <li>Javascript can't interact with HTML elements directly, so it creates a DOM</li> </ul>"},{"location":"javascript/web_api/dom#window-object","title":"Window Object","text":"<ul> <li>Current browser window</li> <li>Can be used to show alerts, opening new window, closing current window</li> <li>All global variables and functions belong to the window object</li> <li>All the other objects like document, screen, history belong to the window object</li> </ul> <pre><code>// Properties\nname\nframes // Gets window items like iframes\nframeElement\ninnerWidth\ninnerHeight\nouterWidth\nouterHeight\nscreenX // Current X coordinate in pixels\nscreenY // Current U coordinate in pixels\nscrollX // Number of pixels scrolled horizontally\nscrollY // Number of pixels scrolled vertically\n\n// Methods\nprint()\ngetSelection() // Returns selected object\nalert(message)\nconfirm(message) // Show confirm box to get confirmation from users\nprompt(message) // Show prompt bos to get user input\n\nfocus()\nmoveBy(deltaX, deltaY) // Changes position of window relative to current position\nmoveTo(x, y) // Changes position of window absolutely\nscrollBy(deltaX, deltaY) // Relative scroll\nscrollTo(x, y) // Absolute scroll\nopen() // Opens a new window\nopen(url, target)\nclose() // Closes the current window\n</code></pre>"},{"location":"javascript/web_api/dom#document-object","title":"Document Object","text":"<ul> <li>Currently opened web page in the browser window</li> <li>Forms the root node of the html document called HTML DOM</li> <li>Accessed as <code>window.document</code> or just <code>document</code></li> <li>Provides properties and methods to access HTML elements &amp; manipulate them</li> </ul> <pre><code>// Properties\ntitle // Get or set title of the document\nURL\ndocumentElement // &lt;html&gt;\nhead // &lt;head&gt;\nbody // &lt;body&gt;\nforms // all &lt;forms&gt;\nchildren\ncookie\n\n\n// Methods\ngetElementById(id)\ngetElementById(class)\ngetElementByName(name)\ngetElementByTagName(tagName)\nquerySelector(cssSelector) // #test, div.note, input, p, .highlighted\nquerySelectorAll(cssSelector)\n\ncreateElement(tagName)\ncreateTextNode(text)\ncreateAttribute(name)\ngetAttribute(name)\nsetAttribute(name)\nappendChild(node)\nremoveChild(node)\naddEventListener(eventType, callbackFn)\nremoveEventListener()\n</code></pre>"},{"location":"javascript/web_api/dom#cookies","title":"Cookies","text":"<pre><code>const setCookie = (key, value, expireInDays) =&gt; {\n  let cookie = `${key}=${value};`\n\n  if (expireInDays != null) {\n    const expireInSeconds = days * 24 * 60 * 60\n    let expiryDate = newDate()\n    expiryDate.setTime(date.getTime() + expireInSeconds * 1000)\n    expiryDate = expiryDate.toUTCString()\n    cookie += `expires=${expiryDate}`\n  }\n\n  document.cookie = cookie\n}\n\nconst deleteCookie = (key) =&gt; {\n  setCookie(key, null, 0)\n}\n\nconst getCookie = (cookieKey) =&gt; {\n  // Decode the cookies to remove any encoding traces\n  let cookies = decodeURIComponent(document.cookie);\n  cookies = cookies.split(';');\n\n  for (let cookie of cookies) {\n    let [key, value] = cookie.split('=');\n    key = key.trim();\n    if (key === cookieKey) return value.trim();\n  }\n}\n</code></pre>"},{"location":"javascript/web_api/dom#screen-object","title":"Screen Object","text":"<ul> <li>Window screen of the user device</li> <li>Accessed as <code>window.screen</code> or just <code>screen</code></li> </ul> <pre><code>// Properties\nwidth\nheight\n</code></pre>"},{"location":"javascript/web_api/dom#history","title":"History","text":"<ul> <li>History of current session of the window</li> <li>Accessed as <code>window.history</code> or just <code>history</code></li> </ul> <pre><code>// Methods\nback()\nforward()\n</code></pre>"},{"location":"javascript/web_api/dom#navigator","title":"Navigator","text":"<ul> <li>Used to get browser name, version, cookies</li> <li>Accessed as <code>window.navigator</code> or just <code>navigator</code></li> </ul> <pre><code>// Properties\nappName\nappVersion\ncookieEnabled\nplatform // Platform or OS\nuserAgent // user-agent header\n</code></pre>"},{"location":"javascript/web_api/dom#location","title":"Location","text":"<ul> <li>Helps to manipulate information of the window location (URL)</li> <li>For example, to get the host from current url</li> <li>Accessed as <code>window.location</code> or just <code>location</code></li> <li>Set <code>window.location = url</code> to go or redirect to a specific url</li> </ul> <pre><code>// Properties\nhash // Get or set anchor part of URL\nhost // Get or set hostname or port number of URL\nhostname\nhref // Get or set URL of current window\norigin // Protocol, domain, and port of URL\npathname // Path or route\nport\nprotocol\nsearch // Get or set query string of URL\n\n// Methods\nassign(url) // Loads new document at given URL\nreplace(url) // Replaces the current document with a new document at given URL\nreload()\ntoString() // URL in string format\n</code></pre>"},{"location":"javascript/web_api/dom#console","title":"Console","text":"<ul> <li>Allows to access the debugging console of the window</li> <li>Accessed as <code>window.console</code> or just <code>console</code></li> </ul> <pre><code>// Methods\nlog(message)\ninfo(message)\nwarn(message)\nerror(message)\nclear()\n</code></pre>"},{"location":"javascript/web_api/debouncing","title":"Debouncing","text":""},{"location":"javascript/web_api/debouncing#debouncing","title":"Debouncing","text":"<ul> <li>Debouncing is a simpler way to delay the execution of a particular function</li> <li>Until a certain amount of time has passed since the last execution of the function</li> <li>Avoids unnecessary repeated function calls</li> <li>For example, when we press the button to call the elevator, it registers the event</li> <li>After that, when you press the call button multiple times in a short period of time<ul> <li>It ignores the button press as the elevator can't come faster</li> </ul> </li> </ul> <pre><code>var output = document.getElementById(\"output\")\nvar btn = document.getElementById(\"btn\")\n\n// Add event listener to button\n// Waits 2s before printing Hello and time\nbtn.addEventListener(\"click\", debounce(function () {\n  output.innerHTML = \"Hello \" + new Date().toLocaleTimeString();\n}, 2000));\n\n// Debounce function\nfunction debounce(func, wait) {\n  let timeout;\n\n  return function () {\n    // Save the context and arguments of the function\n    let context = this\n    let args = arguments\n\n    clearTimeout(timeout);\n\n    timeout = setTimeout(function () {\n      func.apply(context, args);\n    }, wait);\n  };\n}\n</code></pre>"},{"location":"python/introduction","title":"Introduction","text":""},{"location":"python/introduction#characteristics","title":"Characteristics","text":"<ul> <li>Interpreted language<ul> <li>No need to compile the program before executing<ul> <li>Where machine version of the entire source program is generated</li> <li>And it fails if a single erroneous statement occurs</li> </ul> </li> <li>Processed at runtime by the interpreter<ul> <li>Interpreter reads the source code statement by statement</li> <li>It takes one instruction from the code at a time</li> <li>And translates it to machine code &amp; executes it</li> </ul> </li> </ul> </li> <li>Dynamically typed<ul> <li>Doesn't know about the data type of a variable until the code runs</li> <li>No need to explicitly state the data type during variable declaration</li> <li>Altering data type of the variable is allowed</li> <li>While in statically typed languages, type checking occurs at compile time</li> </ul> </li> <li>Strongly typed<ul> <li>Doesn't allow automatic type conversion between unrelated data types</li> <li>That is, 1 + '2' will raise an error</li> <li>Languages like javascript are weakly typed (1 + '2' = '12')</li> </ul> </li> <li>Blocks of code are denoted by line indentation which is rigidly enforced</li> <li>Automatic garbage collection</li> <li>Supports imperative, structured and OOP methodology</li> <li>PEP (Python Enhancement Proposal)<ul> <li>Facilitates new features and maintains readability</li> <li>Allows anyone to submit a PEP for a new feature or library</li> </ul> </li> </ul>"},{"location":"python/introduction#applications","title":"Applications","text":"<ul> <li>Data science<ul> <li>Libraries like NumPy, Pandas, Matplotlib are extensively used</li> <li>To apply mathematical algorithms to data and generate visualizations</li> </ul> </li> <li>Machine learning<ul> <li>Libraries like Scikit-learn and TensorFlow help in building models</li> <li>For prediction of trends based on past data</li> <li>Like customer satisfaction, projected values of stocks</li> </ul> </li> <li>Web Development<ul> <li>Django, Flask, Pyramid facilitate rapid web application development</li> </ul> </li> <li>Computer vision &amp; image processing<ul> <li>OpenCV is a library used for capturing &amp; processing images<ul> <li>It is a C++ library and its python port is used</li> </ul> </li> <li>Used for face detection &amp; pattern recognition</li> </ul> </li> <li>Also used in embedded systems, internet of things (IoT), desktop GUI, scripting</li> </ul>"},{"location":"python/introduction#python-interpreter","title":"Python Interpreter","text":"<ul> <li>Works on the principle of REPL (Read, Evaluate, Print, Loop)</li> <li>Can be opened by running the command: python</li> <li>IPython (Interactive Python)<ul> <li>More enhanced and powerful interactive environment than the standard python shell</li> <li>Provides many features like syntax highlight, autocompletion, tracks history</li> </ul> </li> </ul>"},{"location":"python/introduction#virtual-environment","title":"Virtual Environment","text":"<ul> <li>Used to create a virtual installation of python inside a project directory</li> <li>Helps to install and manage python packages for each project<ul> <li>Without breaking other environments</li> </ul> </li> <li>Supported by <code>venv</code> module in standard python distribution</li> </ul> <pre><code>python -m venv new_env\nsource new_env/bin/activate\ndeactivate\nrm -rf new_env # To delete the virtual env\n</code></pre>"},{"location":"python/introduction#basics","title":"Basics","text":"<pre><code># Single line comment\n'''\nMultiline comment\n'''\n\n# Standard Input\n# Reads the user input (as a string)\n# If the input is required as integer, need to cast it like int(value)\nvalue = input('Enter input value')\n\n# Standard Output\nprint('Hello')\nprint(val1)\nprint(val1, val2) # Seperated using space by default\nprint(val1, val2, sep=', ') # Seperated by comma\nprint(val1, val2, sep=', ', end='\\n') # Separated by comma and ends with newline\n\n# Performance\nfrom timeit import timeit\n# timeit(callable, number = num)\n# 'number' is the number of times it will be executed\ntimeit(lambda: test_function(arg1, arg2), number = 5)\n</code></pre>"},{"location":"python/variables","title":"Variables","text":""},{"location":"python/variables#variables","title":"Variables","text":"<ul> <li>Reserved memory locations are used to store values</li> <li>When a variable is created, it reserves some space in the memory</li> <li>Stores an object in the memory only once</li> <li>The variable refers to this object and not the memory location</li> <li>If two variables are equated, they refer to the same object</li> <li>If the value of the variable changes</li> <li>It creates a new object with the new value at some other location</li> <li>The old object &amp; memory location remains unreferred</li> <li>Garbage collector releases the memory occupied by unreferred objects</li> <li>In contrast, variables in C are memory referenced and changes are overwrittten</li> </ul> <pre><code># Declaration\nname = 'John Wick'\ncounter = 100\n\n# Get the data type\ntype(name) # &lt;class 'str'&gt;\ntype(counter) # &lt;class 'int'&gt;\n\n# Deleting the reference\ndel name, counter\n\n# Parallel Assignment\na, b, c = 10, 20, 'John Wick'\na = b = c = 10\n\n# If two variables are equated, they refer to the same object\na = b = 10\na is b # True\nid(a) == id(b) # True\n</code></pre>"},{"location":"python/variables#types","title":"Types","text":"<ul> <li>Local</li> <li>Can be enlisted using <code>locals()</code></li> <li>Global</li> <li>Determined from the scope</li> <li>Defined the same way as local variables</li> <li>Can be enlisted using <code>globals()</code></li> <li>If modified from inside a function, it will raise an error<ul> <li>Use the global keyword to refer it before modifying</li> <li><code>global variable_name</code></li> </ul> </li> <li>Constant</li> <li>Not formally defined, but can be indicated using all caps</li> <li>For example, PI_VALUE</li> </ul>"},{"location":"python/data_types","title":"Data Types","text":""},{"location":"python/data_types#data-types","title":"Data Types","text":"<ul> <li>Define the type of data stored in variables</li> <li><code>None</code> data type is used to denote nothing</li> </ul>"},{"location":"python/data_types#boolean","title":"Boolean","text":"<pre><code># bool\nflag = True\nin_process = False\n</code></pre>"},{"location":"python/data_types#numeric","title":"Numeric","text":"<pre><code># Immutable\n\n# int\na = 10\n\n# float\nb = 10.25\n\n# complex\nc = 10 + 2j\n</code></pre>"},{"location":"python/data_types#string","title":"String","text":"<pre><code># str\n# Immutable\ntext = 'Hello World!'\ntext = \"Hello World!\"\npara = '''Multiline\nString'''\n</code></pre>"},{"location":"python/data_types#sequence","title":"Sequence","text":"<ul> <li>Bounded and iterable</li> <li>Can store elements with different data types (as opposed to C)</li> </ul> <pre><code># list\n# Mutable (elements and size can be changed)\nitems = [1, 2.5, 'one', 'two', [3, 4]]\nitems[2] # 'one'\n\n# tuple\n# Immutable (cannot be updated)\n# Read-only lists\nitems = (1, 2.5, 'one', 'two', [3, 4])\nitems[2] # 'one'\n\n# range\n# Immutable sequence of numbers (used to iterate)\n# range(start, stop, step)\nrange(3) # 0, 1, 2\nrange(5, 8) # 5, 6, 7\nrange(5, 15, 3) # 5, 8, 11\nrange(8, 5, -1) # 8, 7, 6\nfor i in range(3): print(i) # Will print 0, 1, 2\n</code></pre>"},{"location":"python/data_types#mapping","title":"Mapping","text":"<pre><code># dict\n# Keys are usually strings or numbers but can be almost any type\nnumber_map = { 1: 'one', 2: 'two' }\nnumber_map[1] # 'one'\n\nword_map = { 'one': 1, 'two': 2 }\nword_map['one'] # 1\n</code></pre>"},{"location":"python/data_types#set","title":"Set","text":"<pre><code># set\n# Stores unique immutable objects (int, float, complex, bool, string, tuple)\n# But it itself is mutable\n# Not indexed or ordered:\n# The position of items is optimized by python\n# To perform operations over set as defined in mathematics\nitems = {1, 2.5, 'one', 'two'}\n\n# frozenset\n# Imutable set\n</code></pre>"},{"location":"python/data_types#binary","title":"Binary","text":"<ul> <li>Commonly used while dealing with files, images, network packets, etc</li> </ul> <pre><code># bytes\n# Each byte is an integer value between 0 &amp; 255\nb = b'Hello'\nb = bytearray([72, 101, 108, 108, 111]) # b'Hello'\n\n# bytearray\n# mutable\na = b'Hello'\nb = bytearray([72, 101, 108, 108, 111])\nb = bytearray('Hello', 'utf-8')\n\n# memoryview\n# Provides a view into the memory of the original object\n# Generally objects that support the buffer protocol like bytes &amp; bytearray\ndata = bytearray(b'Hello')\nview = memoryview(data)\nprint(view) # &lt;memory at 0x00000186FFAA3580&gt;\n</code></pre>"},{"location":"python/data_types#type-casting","title":"Type Casting","text":""},{"location":"python/data_types#implicit-casting","title":"Implicit Casting","text":"<ul> <li>When a language compiler/interpreter automatically converts an object</li> <li>Python is strongly typed</li> <li>Doesn't allow automatic type conversion between unrelated data types</li> <li>Examples<ul> <li>1 + '2' will raise an error</li> <li>1 + 2.5 = 3.5</li> <li>1 + True = 2</li> </ul> </li> <li>Object with lesser byte size is upgraded to match the larger byte size</li> <li>In 1 + 2.5, 1 will be upgraded to float as 1.0</li> <li>int occupies 4 bytes, float occupies 8 bytes</li> <li>This is because converting 2.5 to int will result in loss of data</li> </ul>"},{"location":"python/data_types#explicit-casting","title":"Explicit Casting","text":"<ul> <li>Using python's built-in functions to perform explicit conversions</li> <li>Such as string to integer</li> </ul> <pre><code>str(100) # '100'\nstr(10.5) # '10.5'\nstr([1, 2]) # '[1, 2]'\n\nint('100') # 100\nint('110', 2) # Binary: 6\nint('2A9', 16) # Hex: 681\nint(10.5) # 10\nint('Hello') # Raises error\nfloat(100) # 100.0\n\nlist('Hello') # ['H', 'e', 'l', 'l', 'o']\nlist((1, 2)) # [1, 2]\ntuple([1, 2]) # (1, 2)\nlist(range(2, 6)) # [2, 3, 4, 5]\n</code></pre>"},{"location":"python/operators","title":"Operators","text":""},{"location":"python/operators#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li>Includes regular operators like +, -, *, /</li> </ul> <pre><code>a / b # Float Division: 5 / 2 = 2.5\na // b # Floor Division: 5 / 2 = 2\na % b # Modulus\na ** b # Exponent\n</code></pre>"},{"location":"python/operators#logical-operators","title":"Logical Operators","text":"<pre><code>a and b # Same as &amp;&amp; in other languages\na or b # Same as || in other languages\nnot a\n</code></pre>"},{"location":"python/operators#membership-operators","title":"Membership Operators","text":"<pre><code>a = 10\nb = [10, 20]\n\na in b # True\na in { 10: 'ten' } # True\na not in b # False\n</code></pre>"},{"location":"python/operators#identity-operators","title":"Identity Operators","text":"<pre><code>a = [10, 20]\nb = [10, 20]\nc = a\n\na is c # True\na is not b # True\n</code></pre>"},{"location":"python/operators#other-operators","title":"Other Operators","text":"<ul> <li>Comparison: ==, !=, &gt;, &lt;, &gt;=, &lt;=</li> <li>Assignment: =, +=, -=, *=, /=, //=, etc.</li> <li>Bitwise: &amp;, |, ^, ~, &lt;&lt;, &gt;&gt;</li> </ul>"},{"location":"python/control_flow","title":"Control Flow","text":""},{"location":"python/control_flow#if-else","title":"If Else","text":"<ul> <li>Any non-zero and non-null values are evaluated to True</li> </ul> <pre><code>if marks &lt; 30:\n  result = 'Failed'\nelif marks &gt; 75:\n  result = 'Distinction'\nelse:\n  result = 'Passed'\n\n# Inline if\nresult = 'Failed' if marks &lt; 30 else 'Passed'\n</code></pre>"},{"location":"python/control_flow#match-case","title":"Match Case","text":"<pre><code># Case values can be any literal, even list\nmatch category:\n  case 'A': return 'Distinction'\n  case 'B': return 'Passed'\n  case 'C': return 'Failed'\n  case _: return 'Unknown' # Default case\n</code></pre>"},{"location":"python/control_flow#loops","title":"Loops","text":""},{"location":"python/control_flow#for-loop","title":"For loop","text":"<pre><code>for item in words:\n  print(item)\n\nfor i in range(10):\n  print(i)\n\nfor key, val in data.items():\n  print(key, val)\n\nfor key in data:\n  print(key)\n\n# For Else loop\n# Executes else when the loop terminates\n# Not executed when terminated by 'break' statement\n# Will print 1, 2, list ended\nfor i in range(1, 3):\n  print(i, end=', ')\nelse:\n  print('list ended')\n</code></pre>"},{"location":"python/control_flow#while-loop","title":"While loop","text":"<pre><code>while i &lt; 10:\n  i += 1\n\n# While Else loop\nwhile i &lt; 10:\n  i += 1\nelse:\n  print('Loop ended')\n</code></pre>"},{"location":"python/control_flow#jump-statements","title":"Jump Statements","text":"<pre><code>words = ['hello', 'world']\n# break\n# Will print 'hello'\nfor item in words:\n  if item == 'world': break\n  print(item, end=' ')\n\n# continue\n# Will print 'world'\nfor item in words:\n  if item == 'hello': continue\n  print(item, end=' ')\n\n# pass\n# Does nothing\n# Ellipses (...) can also be used instead of pass keyword\n# Will print 'hello world'\nfor item in words:\n  if item == 'hello': pass # do nothing\n  print(item, end=' ')\n</code></pre>"},{"location":"python/functions","title":"Functions","text":""},{"location":"python/functions#function","title":"Function","text":"<pre><code>def is_even(number):\n  return number % 2 == 0\n\nis_even(4)\n</code></pre>"},{"location":"python/functions#pass-by-reference-or-value","title":"Pass by Reference or Value","text":"<ul> <li>Behavior of arguments depends on whether they are mutable or immutable</li> </ul>"},{"location":"python/functions#immutable-arguments","title":"Immutable Arguments","text":"<ul> <li>If the passed object is immutable (like numeric), arguments are pass by value</li> <li>Changing their value creates a new object in memory and leaves the original variable unchanged</li> </ul> <pre><code>def process(value):\n  value = value + 1\n  print(value) # 11\n\nvalue = 10\nprocess(value)\nprint(value) # 10\n</code></pre>"},{"location":"python/functions#mutable-arguments","title":"Mutable Arguments","text":"<ul> <li>If the passed object is mutable, arguments are pass by reference</li> <li>Since python variable is a reference to the object in memory</li> </ul> <pre><code>def process(array):\n  array.append(3)\n  print(array) # [1, 2, 3]\n\narray = [1, 2]\nproces(array)\nprint(array) # [1, 2, 3]\n</code></pre>"},{"location":"python/functions#arguments","title":"Arguments","text":"<pre><code># Positional arguments\n# Required by the function in correct positional order\ndef process(val1, val2):\n  print(val1, val2)\n\n# Keyword arguments\n# When arguments are identified by name in functional call\n# Should be used after positional arguments\ndef process(val1):\n  print(val)\nprocess(val1 = 'hello')\n\n# Default arguments\n# Default value is used if no value is passed\ndef process(val1 = 5):\n  print(val1)\n\n# Arbitrary arguments\n# Variable number of arguments\n# Should be used after positional arguments\ndef add(*args):\n  return sum(args)\n\nadd(10, 20, 30, 40)\n\ndef process(*args, **kwargs):\n  sum(args)\n  print(kwargs)\n\nprocess(10, 20, name = 'John Wick', address = 'New York')\n</code></pre>"},{"location":"python/functions#annotations","title":"Annotations","text":"<ul> <li>Used to add additional metadata about arguments and return data type</li> <li>Since python is dynamically typed language</li> <li>It doesn't enforce any type checking at runtime</li> <li>No error is raised if the data type is different</li> <li>They are ignored at runtime</li> </ul> <pre><code># With data type\ndef add(a: int, b: int):\n  return a + b\n\n# With return type\ndef add(a: int, b: int) -&gt; int:\n  return a + b\n\n# With expression\ndef total(a: 'Marks in Physics', b: 'Marks in Chemistry', c: 'Marks in Maths') -&gt; int:\n  return a + b + c\n\n# With default arguments\ndef percent(a: 'physics', b: 'maths', c: 'max_marks' = 100) -&gt; int:\n  return ((a + b) * 100)/(2 * c)\n\n# With arbitrary arguments\ndef process(*args: 'numbers', **kwargs: 'data'):\n  pass\n\n# Multiple information\ndef division(\n  num: dict(type=float, msg: 'numerator'),\n  den: dict(type=float, msg: 'denominator')\n) -&gt; float:\n  return num/den\n</code></pre>"},{"location":"python/anonymous_and_decorator_functions","title":"Anonymous And Decorator Functions","text":""},{"location":"python/anonymous_and_decorator_functions#anonymous-function","title":"Anonymous Function","text":"<ul> <li>Defined using lambda keyword</li> <li>Returns a single expression that can be stored in a variable</li> <li>Have their own local namespace</li> <li>Cannot access variables other than parameter list</li> <li>Cannot access variables in global namespace</li> </ul> <pre><code>add = lambda a, b: a + b\nadd(10, 20)\n</code></pre>"},{"location":"python/anonymous_and_decorator_functions#decorator-functions","title":"Decorator Functions","text":"<pre><code>def test_decorator(test_function):\n  def nested_function(value):\n    # Wraps the test_function and extends its behavior\n    print('hi', end = ', ')\n    test_function(value)\n\n  return nested_function\n\n# Method 1: By using decorator\n@test_decorator\ndef test_function(value):\n  print('hello')\n\ntest_function() # hi, hello\n\n# Method 2: By reassigning\ndef test_function():\n  print('hello')\n# Will need to add the 'value' argument in test_decorator\ntest_function = test_decorator(test_function, value)\n\ntest_function() # hi, hello\n</code></pre>"},{"location":"python/iterators","title":"Iterators","text":""},{"location":"python/iterators#iterators","title":"Iterators","text":"<pre><code># seq can be any iterable like list, tuple, set, etc.\n# func can be regular function or lambda function\n\n# Returns True or False\nall(seq)\nany(seq)\n\nenumerate(seq) # Returns iterable with tuples like (index, item)\niter(seq) # Returns iterable\nnext(it) # To get the next object from iterable like iter or reversed\n\n# Returns reversed iterable\n# Casting is required to get a list: list(reversed(seq))\nreversed(seq)\n\n# Returns a list with items sorted\n# key is used for custom sorting function\n# rev can be true or false\nsorted(seq, key = func, reverse = rev)\n\n# Zips sequences in form of tuple and returns an iterable\n# list(zip(['one', 'two'], [1, 2], [3, 4])) will return [('one', 1, 3), ('two', 2, 4)]\nzip(seq1, seq2, ...)\n\n# Returns iterable\n# list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4])) will return [2, 4]\nfilter(func, seq)\nmap(func, seq)\n</code></pre>"},{"location":"python/modules","title":"Modules","text":""},{"location":"python/modules#module","title":"Module","text":"<ul> <li>Related entities like functions, classes, variables, etc. grouped together</li> <li>Enhances modularity by easily making them available to other programs</li> <li>Some built-in modules: os, string, math, datetime, collections, random, venv</li> </ul> <pre><code># process_module.py\ndef process(data):\n  pass\n\ndef validate(data):\n  pass\n\n# program.py\nimport process_module\nprocess_module.process(data)\n\n# To import only selected entities\nfrom process_module import process, validate\nvalidate(data)\n\n# To import all entities without module namespace\nfrom process_module import *\nvalidate(data)\n\n# Alias module\nimport process_module as pr\npr.process(data)\n</code></pre>"},{"location":"python/modules#attributes","title":"Attributes","text":"<ul> <li><code>module.__name__</code> returns the name of the module</li> <li><code>module.__file__</code> returns the path of the module file</li> <li><code>dir(module)</code> returns the names (variables &amp; functions) defined by module</li> <li><code>importlib.reload(module)</code> to reload module using the reload method in importlib</li> <li>When a module is imported, only the functions should be imported</li> <li>And not the executable statements</li> <li>This can be done by checking <code>__name__</code></li> <li>Since it returns <code>__main__</code> when the script is executed</li> </ul> <pre><code># module.py\ndef add(a, b):\n  return a + b\n\n# Do not run executable statements if this module is imported somewhere\nif __name__ == '__main__':\n  print(add(10, 20))\n</code></pre>"},{"location":"python/modules#package","title":"Package","text":"<ul> <li>Heirarchical file directory consisting of multiple modules</li> <li>Need to create <code>__init__.py</code> to initialize a directory as package</li> <li>Put explicit import statements that are required</li> </ul> <pre><code># project/custom_package/__init__.py\nimport validator\nimport data_processor\n\n# project/test.py\nimport custom_package\n</code></pre>"},{"location":"python/modules#installing-package","title":"Installing Package","text":"<ul> <li>To use a package anywhere in a system, it needs to be installed using PIP utility</li> <li>Save the following script in the parent folder</li> <li>And run the pip utility from command prompt in package folder</li> </ul> <pre><code># setup.py\nfrom setuptools import setup\nsetup(\n  name='custom_package',\n  version='0.1',\n  description='Package setup script',\n  url='#',\n  author='anonymous',\n  author_email='test@gmail.com',\n  license='MIT',\n  packages=['custom_package'],\n  zip_safe=False\n)\n</code></pre>"},{"location":"python/classes","title":"Classes","text":""},{"location":"python/classes#instance-methods","title":"Instance Methods","text":"<pre><code>class Employee:\n  # Constructor\n  def __init__(self, name, age):\n    # Instance Variables\n    self.name = name\n    self.age = age\n\n  # Instance Methods\n  def display_name(self):\n    print(self.name)\n\nEmployee.__name__ # Employee\nEmployee.__module__ # __main__\n\nemp = Employee('John Wick', 25)\nemp.name\nemp.__dict__ # { 'name': 'John Wick', 'age': 25 }\nisinstance(emp, Employee) # True\ncallable(emp.display_name) # True\n\nhasattr(emp, 'name') # True\ngetattr(emp, 'name') # 'John Wick'\nsetattr(emp, 'name', 'Tom Cruise')\ndelattr(emp, 'name')\n</code></pre>"},{"location":"python/classes#class-methods","title":"Class Methods","text":"<ul> <li>Can be called through class or instance</li> </ul> <pre><code>class Employee:\n  # Class Variables\n  department = 'Finance'\n\n  # Class Methods\n  @classmethod\n  def print_dept(klass):\n    print(klass.department)\n\n  @classmethod\n  def print_custom_dept(klass, dept):\n    print(dept)\n\nEmployee.print_dept() # Finance\nEmployee().print_dept() # Finance\n</code></pre>"},{"location":"python/classes#static-methods","title":"Static Methods","text":"<ul> <li>Doesn't require class or self object</li> <li>Used for functions that can be standalone but somehow are in context of the class</li> <li>Can be called through class or instance</li> </ul> <pre><code>class Employee:\n  # Static Methods\n\n  @staticmethod\n  def add(a, b):\n    return a + b\n\nEmployee.add(1, 2) # 3\nEmployee().add(1, 2) # 3\n</code></pre>"},{"location":"python/classes#access-modifiers","title":"Access Modifiers","text":"<ul> <li>Public: name (No underscore)</li> <li>Protected: _name (single underscore)</li> <li>Private: __name (double underscore)</li> </ul> <pre><code>class Employee:\n  def __init__(self, name, age, dept):\n    self.name = name # Public\n    self._age = age # Protected\n    self.__dept = dept # Private\n\n  def display_name(self):\n    print(self.name)\n\nemp = Employee('John Wick', 25, 'Finance')\nemp._age # 25\nemp.__dept # Raises error\n\n# Private attributes can be accessed through Mangling\n# But should be refrained from use\nemp._Employee__dept # Finance\n</code></pre>"},{"location":"python/classes#getter-and-setter","title":"Getter and Setter","text":""},{"location":"python/classes#property-method","title":"Property Method","text":"<pre><code>class Employee:\n  def __init__(self, name, age):\n    self.__name = name\n    self.__age = age\n\n  def get_name(self):\n    return self.__name\n\n  def set_name(self, name):\n    # Can add validations &amp; processing\n    self.__name = name\n\n  def delete_name(self, name):\n    # Can add validations\n    del self.__name\n\n  name = property(get_name, set_name, delete_name)\n\nemp = Employee('John Wick', 25)\nemp.name\nemp.name = 'Tom Cruise'\ndel emp.name\n</code></pre>"},{"location":"python/classes#property-decorator","title":"Property Decorator","text":"<pre><code>class Employee:\n  def __init__(self, name, age, dept):\n    self.__name = name\n    self.__age = age\n\n  @property\n  def name(self):\n    return self.__name\n\n  @name.setter\n  def name(self, name):\n    # Can add validations &amp; processing\n    self.__name = name\n\n  @name.deleter\n  def name(self, name):\n    # Can add validations\n    del self.__name\n\nemp = Employee('John Wick', 25)\nemp.name\nemp.name = 'Tom Cruise'\ndel emp.name\n</code></pre>"},{"location":"python/classes#nested-classes","title":"Nested Classes","text":"<pre><code>class Student:\n  def __init__(self, name):\n    self.name = name\n    self.subjects = [self.Subject('Physics'), self.Subject('Maths')]\n\n  class Subject:\n    def __init__(self, title):\n      self.title = title\n</code></pre>"},{"location":"python/oop_classes","title":"Oop Classes","text":""},{"location":"python/oop_classes#inheritance","title":"Inheritance","text":"<pre><code>class Parent:\n  def __init__(self, name):\n    self.name = name\n\nclass Child(Parent):\n  def __init__(self, name, dept):\n    super().__init__(name)\n    self.dept = 'Finance'\n\n# Multiple Inheritance\n# Child.mro() returns hierarchical order of classes to resolve methods\n# For this class, it will return [&lt;class '__main__.Child1'&gt;, &lt;class '__main__.Parent1'&gt;,\n#  &lt;class '__main__.Parent2'&gt;, &lt;class 'object'&gt;]\nclass Child1(Parent1, Parent2):\n  pass\n</code></pre>"},{"location":"python/oop_classes#abstraction","title":"Abstraction","text":"<pre><code># ABC: Abstract Base Class\nfrom abc import ABC, abstractmethood\n\n# Abstract Class or Interface\n# Declaring an object of Shape class will raise an error\nclass Shape(ABC):\n  @abstractmethod\n  def draw(self):\n    raise Exception('Not implemented')\n\n# Concrete Classes\nclass Circle(Shape):\n  def draw(self):\n    pass\n\nclass Rectangle(Shape):\n  def draw(self):\n    pass\n</code></pre>"},{"location":"python/oop_classes#polymorphism","title":"Polymorphism","text":"<pre><code># Method Overriding\n# Base overridable methods: __init__, __del__, __repr__, __str__\nclass Parent:\n  def display(self):\n    print('Parent')\n\nclass Child(Parent):\n  def display(self):\n    print('Child')\n\n# Method Overloading\n# Not supported by standard libraries of python\n# Can use default values for arguments and work around that\n# Otherwise, can use multipledispatch library\nfrom multipledispatch import dispatch\nclass Operation:\n  @dispatch(int, int)\n  def add(self, a, b):\n    return a + b\n\n  @dispatch(int, int, int)\n  def add(self, a, b, c):\n    return a + b + c\n</code></pre>"},{"location":"python/oop_classes#encapsulation","title":"Encapsulation","text":"<pre><code>class Employee:\n  def __init__(self, name):\n    self.__name = name\n\nemp = Employee('Tom Cruise')\n# Raises error\n# Private attributes are encapsulated\nemp.__name\n</code></pre>"},{"location":"python/special_classes","title":"Special Classes","text":""},{"location":"python/special_classes#singleton-class","title":"Singleton Class","text":"<pre><code>class Test:\n  _instance = None\n\n  def __new__(klass):\n    if klass._instance is None:\n      print('yes')\n      klass.__instance = super().__new__(klass)\n\n    return klass._instance\n</code></pre>"},{"location":"python/special_classes#wrapper-class","title":"Wrapper Class","text":"<pre><code>def test_decorator(Wrapped):\n  class Wrapper:\n    def __init__(self, name):\n      self.wrap = Wrapped(name)\n\n    def print_name(self):\n      print(self.wrap.name)\n\n  return Wrapper\n\n# Equivalent to calling `test_decorator(Wrapped)`\n@test_decorator\nclass Wrapped:\n  def __init__(self, name):\n    self.name = name\n\nobj = Wrapped('Tom Cruise')\nobj.print_name()\n</code></pre>"},{"location":"python/special_classes#enum","title":"Enum","text":"<pre><code>from enum import Enum, unique\n\nclass subjects(Enum):\n  PHYSICS = 1\n  MATHS = 2\n\n# Multiple members can be assigned same value\n# Adding @unique here will prohibit that and raise error\n@unique\nclass subjects(Enum):\n  PHYSICS = 1\n  MATHS = 1\n# ValueError: duplicate values found in &lt;enum 'subjects'&gt;: MATHS -&gt; PHYSICS\n\n# String based\nclass subjects(Enum):\n  PHYSICS = 'P'\n  MATHS = 'M'\n\nmaths = subjects.MATHS\nmaths.name # MATHS\nmaths.value # M\n\nfor subject in subjects:\n  print(subject.name, subject.value)\n</code></pre>"},{"location":"python/error_handling","title":"Error Handling","text":""},{"location":"python/error_handling#errors","title":"Errors","text":"<ul> <li>Syntax errors</li> <li>Logical errors: Output doesn't match the expectation</li> <li>Runtime error or exception</li> <li>An event occurring during the execution disrupts the normal flow</li> </ul> <pre><code>raise ExceptionType(args)\nraise Exception(args) # Exception is also a class\nraise Exception('error message')\n# Indicates that Exception is a direct consequence of AnotherException\nraise Exception('error') from AnotherException\n</code></pre>"},{"location":"python/error_handling#try-block","title":"Try Block","text":"<pre><code>try:\n  # Perform operations\nexcept ExceptionOne as e:\n  print(e) # Contains the reason for exception\n  repr(e.__context__)\n  repr(e.__cause__)\nexcept ExceptionTwo, ExceptionThree:\n  # Perform operations\nexcept:\n  # Any other exceptions\nelse:\n  # If there is no exception\n\n# Try-Finally\n# Finally clause cannot be used with else clause\ntry:\n  # Perform operations\nfinally:\n  # Must execute whether an exception is raised or not\n\ntry:\n  # Perform operations\nexcept ExceptionOne:\n  # Perform operations\nfinally:\n  # Must execute whether an exception is raised or not\n</code></pre>"},{"location":"python/error_handling#custom-exceptions","title":"Custom Exceptions","text":"<pre><code>class CustomException(Exception):\n  pass\n</code></pre>"},{"location":"python/error_handling#logging","title":"Logging","text":"<pre><code>import logging\nlogging.debug('message')\nlogging.info('message')\nlogging.warning('message')\nlogging.error('message')\nlogging.critical('message')\n</code></pre>"},{"location":"python/file_handling","title":"File Handling","text":""},{"location":"python/file_handling#access-modes","title":"Access Modes","text":"<ul> <li>r: read only (default)</li> <li>File pointer is at the beginning of the file</li> <li>w: write only</li> <li>File pointer is at the beginning of the file</li> <li>Overwrites the file if already exists</li> <li>r+: read &amp; write</li> <li>w+: read &amp; write</li> <li>a: append</li> <li>File pointer is at the end of the file</li> <li>a+: read &amp; append</li> <li>+: read &amp; write</li> <li>x: exclusive creation, fails if file already exists</li> </ul>"},{"location":"python/file_handling#read","title":"Read","text":"<pre><code>file1 = open(file_name, access_mode = 'r')\n# Seek is used to move the cursor position\n# file.seek(offset, whence = 0)\n# whence can have 0, 1, or 2 as values\n# 0 means absolute position\n# 1 means relative to current position\n# 2 means relative to the file's end\nfile1.seek(10, 0)\nfile1.tell() # Returns current position\n\nfile1.read() # Reads till the end of file\nfile1.read(10) # Reads 10 bytes of data\nfile1.readline() # Reads one line\nfile1.readline(10) # Reads ten lines\n\nfile1.next() # Returns next line\n</code></pre>"},{"location":"python/file_handling#write","title":"Write","text":"<pre><code>file1 = open(file_name, 'w')\nfile1.write('hello world')\nfile1.writelines(['hello', 'world']) # Writes the sequence to file\nfile1.close()\n</code></pre>"},{"location":"python/file_handling#read-write","title":"Read &amp; Write","text":"<pre><code>file1 = open(file_name, 'a+')\nfile1.seek(10, 1)\nfile1.write('hello world')\nfile1.close()\n</code></pre>"},{"location":"python/file_handling#files-and-directories","title":"Files and Directories","text":"<pre><code>import os\n\n# Files\nos.rename('test1.txt', 'test2.txt')\nos.remove('test1.txt')\n\n# Directories\nos.mkdir('new_dir')\nos.rmdir('old_dir')\nos.getcwd()\nos.chdir('new_dir') # Change current directory\nos.chdir('/home/new_dir')\n</code></pre>"},{"location":"python/data_classes/numbers","title":"Numbers","text":""},{"location":"python/data_classes/numbers#numbers","title":"Numbers","text":"<ul> <li>Immutable</li> </ul> <pre><code>abs(x)\npow(x, y)\nround(x)\n\nmax(x, y, ...)\nmin(x, y, ...)\nsum(seq)\n</code></pre>"},{"location":"python/data_classes/numbers#math","title":"Math","text":"<pre><code>import math\nmath.sqrt(x)\nmath.pow(x, y)\nmath.ceil(x)\nmath.floor(x)\n</code></pre>"},{"location":"python/data_classes/numbers#random","title":"Random","text":"<pre><code>import random\nrandom.random() # Random float between 0 and 1\nrandom.randrange(start, stop, step) # Random element between start &amp; stop\nrandom.choice(seq) # Random item from a list, tuple or string\n</code></pre>"},{"location":"python/data_classes/strings","title":"Strings","text":""},{"location":"python/data_classes/strings#strings","title":"Strings","text":"<ul> <li>Immutable</li> <li>Cannot be modified in-place once stored in a memory location</li> <li>New characters cannot be appended or inserted</li> <li>Any changes will create a new string object</li> <li>One hack can be to convert it into list (which is mutable)</li> <li>Perform required operations and join it back</li> </ul> <pre><code>text = 'hello'\ntext[1] # 'e' (Single char is also a string)\ntext + 'world' # 'hello world'\ntext * 3 # 'hellohellohello'\n\ntext = \"Hello World!\"\npara = '''Multiline\nString'''\n\n'el' in 'hello' # True\n'el' not in 'hello' # False\n\n'hello\\nworld' # Adds new line\nr'hello\\nworld' # Raw string, ignores escaped characters, no new line\n</code></pre>"},{"location":"python/data_classes/strings#formatting","title":"Formatting","text":""},{"location":"python/data_classes/strings#formatting-operator","title":"Formatting Operator","text":"<pre><code># %s: converts to string using str() before formatting\n# %c: character\n'Employee name is %s' % 'John Wick'\n'Category code is %4s' % 'BD' # min padding 2 chars: 'Category code is   BD'\n'%s is in %s department' % ('John Wick', 'Finance')\n# %d: integer\n# %f: float\n'Scored %d out of 20' % 15\n'Scored %2d out of 20' % 6 # min padding 2 chars using space: 'Scored  6'\n'Scored %02d out of 20' % 6 # min padding 2 chars using 0: 'Scored 06 ...'\n'Scored %.2f out of 20' % 6.1 # min 2 zeroes after decimal: 'Scored 6.10'\n'Scored %05.2f out of 20' % 6.1 # min padding 5 chars with 0: 'Scored 06.10'\n</code></pre>"},{"location":"python/data_classes/strings#format-method","title":"Format Method","text":"<pre><code>'{} is in {} department'.format('John Wick', 'Finance')\n'{name} is in {dept} department'.format(name = 'John Wick', dept = 'Finance')\n'{:s} scored {:05.2f} out of 20'.format('John', 6.1)\n'Category code is {:.2}'.format('BDEG') # Truncation: 'Category code is BD'\n</code></pre>"},{"location":"python/data_classes/strings#f-strings","title":"F-strings","text":"<pre><code>name = 'John Wick'; dept = 'Finance'\nf'{name} is in {dept} department'\n\nprice = 100; quantity = 5\nf'Total amount: {price * quantity}' # 'Total amount: 500'\n\n# Self debugging expression using '='\n# 'Total amount: price * quantity = 500'\nf'Total amount: {price * quantity = }'\n</code></pre>"},{"location":"python/data_classes/strings#templates","title":"Templates","text":"<pre><code>from string import Template\ntemplate = Template('$name is in $dept department')\ntemplate.substitute(name = 'John Wick', dept = 'Finance')\n\ndata = { 'name': 'John Wick', 'dept': 'Finance' }\ntemplate.substitute(**data)\n</code></pre>"},{"location":"python/data_classes/strings#slicing","title":"Slicing","text":"<pre><code># From left, the indexes are 0, 1, 2, ...\n# From right, the indexes are ..., -3, -2, -1\n# Slicing: [start:stop:step]\n# With respect to index: [first_index : last_index + 1 : step]\n\ntext = 'hello world'\ntext[:5] # 'hello'\ntext[6:] # 'world'\ntext[:-6] # 'hello'\n\ntext[2:5] # 'llo'\ntext[-5:-2] # 'wor'\ntext[6:-2] # 'wor'\n\ntext[1:10:3] # 'eoo'\ntext[6:][:3] # 'wor'\n\ntext[:] # Just clones the string: 'hello world'\n# Replacing not supported for strings (though supported by lists)\n# text[2:4] = 'kk'\n</code></pre>"},{"location":"python/data_classes/strings#general-methods","title":"General Methods","text":"<pre><code>len(string)\nmax(string)\nmin(string)\n</code></pre>"},{"location":"python/data_classes/strings#instance-methods","title":"Instance Methods","text":"<ul> <li>Applied on string like <code>string.method_name(*args, **kwargs)</code></li> </ul>"},{"location":"python/data_classes/strings#find-and-replace","title":"Find and replace","text":"<pre><code>find(substr, beg = i, end = j) # Returns index if found else -1\n# lfind, rfind\nindex(substr, beg = i, end = j) # Raises exception if not found\n# lindex, rindex\ncount(substr, beg = i, end = j) # Counts occurence of substring\nreplace(old, new)\n\nstartswith(prefix, beg = i, end = j)\nendswith(suffix, beg = i, end = j)\nremoveprefix(prefix)\nremovesuffix(suffix)\n</code></pre>"},{"location":"python/data_classes/strings#split-and-join","title":"Split and Join","text":"<pre><code>strip # Removes trailing whitespaces\n# lstrip, rstrip\nsplit(delimiter) # Deletes delimiter, splits and returns list of subsrings\npartition(sep) # Splits the string in 3 tuples on occurence of separator\n# lpartition, rpartition\njoin(seq) # Joins the sequence using the string\n</code></pre>"},{"location":"python/data_classes/strings#char-types","title":"Char Types","text":"<pre><code>isalpha()\nisdigit() # If all chars are digits (no decimals or fractions)\nisnumeric() # If all chars are any numerical value (including decimals, fractions)\nisalnum()\n</code></pre>"},{"location":"python/data_classes/strings#case","title":"Case","text":"<pre><code>islower()\nisupper()\nistitle()\nlower()\nupper()\ntitle() # Titlecase\ncapitalize() # Capitalizes the first letter of string\n</code></pre>"},{"location":"python/data_classes/lists","title":"Lists","text":""},{"location":"python/data_classes/lists#lists","title":"Lists","text":"<ul> <li>Mutable: Any item can be modified, removed or added</li> <li>The elements can be of any data type (unlike C, C++, Java)</li> </ul> <pre><code>subjects = ['Physics', 'Chemistry', 'Maths']\nitems = [25.50, True, -50, 1+2j, 'Physics']\n\n[1, 2] + [3, 4] # [1, 2, 3, 4]\n[1] * 4 # [1, 1, 1, 1]\n[x * 2 for x in range(5, 10)] # [10, 12, 14, 16, 18]\n[x * 2 for x in range(5, 10) if x % 2 == 0] # [12, 16]\n\n# For 2D array, don't define like [[1] * 4] * 2\n# Because it will update every change in each row\n# For example, num[0][2] = 2 will result in [[1, 1, 2, 1], [1, 1, 2, 1]]\n[[1] * 4 for _ in range(2)] # [[1, 1, 1, 1], [1, 1, 1, 1]]\n</code></pre>"},{"location":"python/data_classes/lists#accessing","title":"Accessing","text":"<pre><code>subjects[1] # 'Chemistry'\nsubjects[1] = 'Statistics'\ndel subjects[1] # ['Physics', 'Maths']\n2 in [1, 2, 3] # True\n2 not in [1, 2, 3] # False\n</code></pre>"},{"location":"python/data_classes/lists#unpacking","title":"Unpacking","text":"<pre><code>x, y = [1, 2] # x = 1, y = 2\nx, *y = [1, 2, 3] # x = 1, y = [2, 3]\nx, *y, z = [1, 2, 3, 4] # x = 1, y = [2, 3], z = 4\nx, *y, z = [1, 4] # x = 1, y = [], z = 4\n</code></pre>"},{"location":"python/data_classes/lists#slicing","title":"Slicing","text":"<pre><code># From left, the indexes are 0, 1, 2, ...\n# From right, the indexes are ..., -3, -2, -1\n# Slicing: [start:stop:step]\n# With respect to index: [first_index : last_index + 1 : step]\n\nnum = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnum[:5] # [1, 2, 3, 4, 5]\nnum[6:] # [7, 8, 9, 10]\nnum[:-6] # [1, 2, 3, 4]\n\nnum[2:5] # [3, 4, 5]\nnum[-5:-2] # [6, 7, 8]\nnum[6:-2] # [7, 8]\n\nnum[1:10:3] # [2, 5, 8]\nnum[6:][:3] # [7, 8, 9]\n\nnum[:] # Just clones the string: 'hello world'\nnum[2:4] = [6, 7] # [1, 2, 6, 7, 5]\nnum[2:4] = [6, 7, 8, 9] # Adds extra items as well: [1, 2, 6, 7, 8, 9, 5]\nnum[2:4] = [6] # Removes existing items: [1, 2, 6, 5]\ndel num[2:4] # [1, 2, 5]\n</code></pre>"},{"location":"python/data_classes/lists#general-methods","title":"General Methods","text":"<pre><code>len(items)\nmax(items)\nmin(items)\nsum(items) # Nesting not allowed: sum((1, 2), (3))\nlist(seq) # Converts sequence or iterator to list\nsorted(items)\nreversed(items)\n# Refer iterators\n</code></pre>"},{"location":"python/data_classes/lists#instance-methods","title":"Instance Methods","text":"<pre><code># Insert\nappend(obj)\nextend(seq) # Append the contents of seq to list\ninsert(index, obj)\ncopy() # Doing list2 = list1 will only refer list2 to list1\n\n# Remove\npop() # Removes last item\npop(index) # Removes item at index\nremove(obj) # Removes first occurence of object\nclear() # Remove all the items\n\n# Find\ncount(obj) # Count of occurences of obj\nindex(obj) # Lowest index where obj occurs\n\nreverse()\nsort(key = func, reverse = rev)\n</code></pre>"},{"location":"python/data_classes/tuples","title":"Tuples","text":""},{"location":"python/data_classes/tuples#tuples","title":"Tuples","text":"<ul> <li>Immutable: Items can be accessed but not modified, removed or added</li> <li>The elements can be of any data type (unlike C, C++, Java)</li> </ul> <pre><code>subjects = ('Physics', 'Chemistry', 'Maths')\nitems = (25.50, True, -50, 1+2j, 'Physics')\nitems = (1,) # To create a single value tuple, comma is required\nitems = 1, 2, 3 # Any set of comma separated objects defaults to tuple\n\n(1, 2) + (3, 4) # [1, 2, 3, 4]\n(1,) * 4 # [1, 1, 1, 1]\ntuple(x * 2 for x in range(5, 10)) # [10, 12, 14, 16, 18]\ntuple(x * 2 for x in range(5, 10) if x % 2 == 0) # [12, 16]\n\n# For 2D array, don't define like [[1] * 4] * 2\n# Because it will update every change in each row\n# For example, num[0][2] = 2 will result in [[1, 1, 2, 1], [1, 1, 2, 1]]\ntuple((1,) * 4 for _ in range(2)) # [[1, 1, 1, 1], [1, 1, 1, 1]]\n</code></pre>"},{"location":"python/data_classes/tuples#accessing","title":"Accessing","text":"<pre><code>subjects[1] # 'Chemistry'\n# Editing will raise error: subjects[1] = 'Statistics'\n# If such operations are required, tuple needs to be converted to list\ndel subjects\n2 in (1, 2, 3) # True\n2 not in (1, 2, 3) # False\n</code></pre>"},{"location":"python/data_classes/tuples#unpacking","title":"Unpacking","text":"<pre><code>x, y = (1, 2) # x = 1, y = 2\nx, *y = (1, 2, 3) # Multiple items unpacked to list: x = 1, y = [2, 3]\nx, *y, z = (1, 2, 3, 4) # x = 1, y = [2, 3], z = 4\nx, *y, z = (1, 4) # x = 1, y = [], z = 4\n</code></pre>"},{"location":"python/data_classes/tuples#slicing","title":"Slicing","text":"<ul> <li>Similar to lists</li> </ul>"},{"location":"python/data_classes/tuples#general-methods","title":"General Methods","text":"<pre><code>len(items)\nmax(items)\nmin(items)\nsum(items) # Nesting allowed: sum((1, 2), (3))\ntuple(seq) # Converts sequence or iterator to list\nsorted(items) # Converts to list\nreversed(items) # Returns iterator\n# Refer: iterators\n</code></pre>"},{"location":"python/data_classes/tuples#instance-methods","title":"Instance Methods","text":"<pre><code># Find\ncount(obj) # Count of occurences of obj\nindex(obj) # Lowest index where obj occurs\n</code></pre>"},{"location":"python/data_classes/sets","title":"Sets","text":""},{"location":"python/data_classes/sets#sets","title":"Sets","text":"<ul> <li>Stores unique objects</li> <li>Mutable, but can store only immutable data types</li> <li>Unordered collection</li> <li>Items are not accessible by positional index</li> <li>Order of items can be changed for optimization</li> <li>This is useful for set operations</li> </ul> <pre><code>subjects = {'Physics', 'Chemistry', 'Maths'}\nitems = {25.50, True, -50, 1+2j, 'Physics'}\nitems = {1, 2, 2, 2, 3} # {1, 2, 3}\n\n# Assigning mutable data types will raise error\n# items = {[1, 2]}\n\n# Any type of conatenation will raise error\n# {1, 2} + {3, 4}\n# {1} * 4\n{x * 2 for x in range(5, 10)} # [10, 12, 14, 16, 18]\n{x * 2 for x in range(5, 10) if x % 2 == 0} # [12, 16]\n\n# Joining &amp; Intersection\n{1, 2} | {3, 4} # {1, 2, 3, 4}\n{1, 2} &amp; {2, 4} # {2}\n{1, 2}.union({3, 4}) # {1, 2, 3, 4}\n{*s1, *s2} # {1, 2, 3, 4} if s1 is {1, 2} &amp; s2 is {3, 4}\n\n# 2D sets cannot be created since set is mutable\n# {{1} * 4 for _ in range(2)} will raise error\n</code></pre>"},{"location":"python/data_classes/sets#accessing","title":"Accessing","text":"<pre><code># Can only traverse through a set\n# Using positional index will raise error\n# subjects[1]\n# subjects[1] = 'Statistics'\n# del subjects[1]\n\n2 in {1, 2, 3} # True\n2 not in {1, 2, 3} # False\n</code></pre>"},{"location":"python/data_classes/sets#unpacking","title":"Unpacking","text":"<pre><code>x, y = {1, 2} # x = 1, y = 2\nx, *y = {1, 2, 3} # x = 1, y = [2, 3]\nx, *y, z = {1, 2, 3, 4} # x = 1, y = [2, 3], z = 4\nx, *y, z = {1, 4} # x = 1, y = [], z = 4\n</code></pre>"},{"location":"python/data_classes/sets#slicing","title":"Slicing","text":"<ul> <li>Not supported since positional indexes are not supported</li> </ul>"},{"location":"python/data_classes/sets#general-methods","title":"General Methods","text":"<pre><code>len(items)\nmax(items)\nmin(items)\nsum(items)\nlist(seq) # Converts sequence or iterator to list\nsorted(items) # Converts to list\n# reversed(items) not supported\n# Refer: iterators\n</code></pre>"},{"location":"python/data_classes/sets#instance-methods","title":"Instance Methods","text":"<pre><code># Insert\nadd(obj)\nupdate(seq) # Add the contents of any seq to the set\nunion(seq) # Similar to union but returns a new set object\ncopy() # Doing set2 = set1 will only refer set2 to set1\n\n# Remove\npop() # Removes the first item from set\nremove(obj) # Removes object and raises error if not present\ndiscard(obj) # Removes object but doesn't raise error if not present\nclear() # Remove all the items\n\n# Find\ncount(obj) # Count of occurences of obj\nindex(obj) # Lowest index where obj occurs\n</code></pre>"},{"location":"python/data_classes/sets#set-functions","title":"Set functions","text":"<pre><code># New set after removing items common with obj\n# Same as a - b\ndifference(obj)\n# New set after removing items uncommon with obj\n# Same as a &amp; b\nintersection(obj)\n# New set after adding uncommon items and removing common items\n# Same as a ^ b\nsymmetric_difference(obj)\n\ndifference_update(obj) # Removes items common with obj\nintersection_update(obj) # Removes items uncommon with obj\nsymmetric_difference_update(obj) # Adds uncommon items and removes common items\n\nisdisjoint(seq) # True if the two sequences have no common element\nissubset(seq) # True if set is subset of seq\nissuperset(seq) # True if set is superset of seq\n</code></pre>"},{"location":"python/data_classes/dictionaries","title":"Dictionaries","text":""},{"location":"python/data_classes/dictionaries#dictionaries","title":"Dictionaries","text":"<ul> <li>Keys should be immutable like number, string or tuple</li> </ul> <pre><code>subjects = { 'Phy': 'Physics', 'Chem': 'Chemistry', 'Math': 'Mathematics' }\nnumbers = { 1: 'one', 2: 'two' }\ncategory = { (1, 'a'): 'A', (2, 'b'): 'B' }\nempty_dict = {}\n\ndict.from_keys(['a', 'b']) # { 'a': None, 'b': None }\ndict.from_keys(['a', 'b'], 100) # { 'a': 100, 'b': 100 }\n\nvalues = [1]\ndict.from_keys(['a', 'b'], values) # { 'a': [1], 'b': [1] }\n# Dict will refer to values variable, any change to it will be reflected\nvalues.append(2) { 'a': [1, 2], 'b': [1, 2] }\n\ndict([('a', 100), ('b', 200)]) # From list of tuples: { 'a': 100, 'b': 200 }\ndict([['a', 100], ['b', 200]]) # From list of lists: { 'a': 100, 'b': 200 }\ndict(a = 100, b = 200) # From keywords: {'a': 100, 'b': 200}\n\n{ 'a': 1, 'b': 2 } | { 'c': 3 } # { 'a': 1, 'b': 2, 'c': 3 }\n{ **dict1, **dict2 }\n</code></pre>"},{"location":"python/data_classes/dictionaries#accessing","title":"Accessing","text":"<pre><code># If key is not present, it will raise error\n# subjects['ab'] will raise key error\nsubjects['Phy'] # 'Physics', using 'phy' as key string is case sensitive\n\n# Doesn't raise error if key is not present\nsubjects.get('Math') # Mathematics\n\nsubjects['Math'] = 'Algebra'\nsubjects['Stat'] = 'Statistics'\ndel subjects['Math']\n\nfor code in subjects: print(code)\nfor code, name in subjects.items(): print(code, name)\n</code></pre>"},{"location":"python/data_classes/dictionaries#general-methods","title":"General Methods","text":"<pre><code>len(items)\nstr(items)\n</code></pre>"},{"location":"python/data_classes/dictionaries#instance-methods","title":"Instance Methods","text":"<pre><code># Return view objects that are refreshed dynamically whenever anything changes\n# Need to typecast to get a list from them\nkeys()\nvalues()\nitems() # View object of key-value tuples\n\nhas_key(key)\n# Returns default if key not present in dict, doesn't raise error\nget(key, default = None)\n# Similar to get, but adds the key with default value if not present\nsetdefault(key, default = None)\n\n# Updates the existing keys from dict2 and adds new keys\n# List of lists or tuples, or keywords can also be used instead of dict2\nupdate(dict2)\ncopy()\n\npop(key) # Removes the key and returns the value\npopitem() # Removes the last inserted key and returns the key-value tuple\nclear()\n</code></pre>"},{"location":"python/modules/arrays","title":"Arrays","text":""},{"location":"python/modules/arrays#arrays","title":"Arrays","text":"<ul> <li>Container that can hold a fix number of items of the same type</li> <li>Can be defined for integer, float and unicode characters</li> </ul> <pre><code>import array\n# array.array(typecode, initializer = None)\nitems = array.array('i', [1, 2, 3]) # Integer\nitems = array.array('d', [1.5, 2.2]) # Float\nitems = array.array('u', 'hello') # Unicode character\nitems = array.fromlist([1, 2, 3])\n</code></pre>"},{"location":"python/modules/arrays#accessing","title":"Accessing","text":"<pre><code>items[1]\nitems[1] = 4\n</code></pre>"},{"location":"python/modules/arrays#slicing","title":"Slicing","text":"<ul> <li>Same as list</li> </ul>"},{"location":"python/modules/arrays#general-methods","title":"General Methods","text":"<pre><code>import copy\ncopy.deepcopy(items)\nsorted(items)\n</code></pre>"},{"location":"python/modules/arrays#instance-methods","title":"Instance Methods","text":"<pre><code>append(element)\ninsert(index, element)\nextend(array2) # Adds all elements from another array\ntolist()\nfromlist(list1) # Adds all elements from a list\n\npop()\npop(index)\nremove(element)\n\nindex(element)\ncount(element)\n\nreverse()\n</code></pre>"},{"location":"python/modules/date_and_time","title":"Date And Time","text":""},{"location":"python/modules/date_and_time#time","title":"Time","text":"<pre><code>import time\n\ntime.sleep(secs)\ntime.time() # Current epoch time\ntime.localtime() # Current tuple time: struct object of time\n\ntime.asctime(tupletime) # Readable format of tuple time\ntime.asctime() # Current time in format 'Wed Apr 01 20:15:10 2024'\ntime.ctime(secs) # Readable format of epoch time\ntime.ctime() # Current time in format 'Wed Apr 01 20:15:10 2024'\n\ntime.strftime(fmt, tupletime) # Tuple time in format fmt\ntime.strftime(fmt) # Current time in format fmt\ntime.strptime(string, fmt) # Parse string with format fmt\n\ntime.tzname # Timezone name\ntime.timezone # Offset in seconds of the local time zone from UTC\n</code></pre>"},{"location":"python/modules/date_and_time#date","title":"Date","text":"<pre><code>from datetime import date\n\ndate1 = date(year, month, day)\nprint(date1) # Prints the date object in format '2024-04-01'\ndate1.year\ndate1.month\ndate1.day\n\ndate.today()\ndate.weekday(date1)\ndate.ctime(date1) # 'Wed Apr 01 00:00:00 2024'\ndate.strftime(fmt)\n\nfrom datetime import date\ntime1 = time(hour, minute, second, microsecond, tzinfo)\n\nfrom datetime import datetime\ndtime1 = datetime(year, month, day, hour, minute, second, microsecond, tzinfo)\ndatetime.now() # Local datetime\ndatetime.today() # Local datetime with tzinfo as none\ndatetime.utcnow()\n</code></pre>"},{"location":"python/modules/date_and_time#calendar","title":"Calendar","text":"<pre><code>import calendar\nprint(cal) # Prints a calendar object in pretty format\ncalendar.calendar(year) # Calendar of the whole year\ncalendar.month(year, month) # Calendar of the month\ncalendar.weekday(year, month, day) # Returns weekday code, 0 is for Monday\ncalendar.monthrange(year, month) # Returns tuple of (weekday_code, no_of_days_in_month)\n</code></pre>"},{"location":"python/multithreading/introduction","title":"Introduction","text":""},{"location":"python/multithreading/introduction#multithreading","title":"Multithreading","text":"<ul> <li>A computer program by default executes instructions in a sequential manner</li> <li>Multi-threading is a mechanism where the main task is divided into threads</li> <li>And executed in an overlapping manner</li> <li>This makes the execution faster</li> <li>Threads</li> <li>Light-weight sub-processes in a single program</li> <li>Threads of a single program share the same memory space</li> <li>So they have less overhead than multiple processes</li> <li>A process always start with a single thread (main thread)</li> <li>A new thread can be started and sub task is delegated to it</li> <li>When the task assigned to a secondary thread is over<ul> <li>It merges with the main thread</li> </ul> </li> <li>A thread can be paused for a event or for a specified interval</li> </ul> <pre><code>from threading import Thread\nimport time\n\ndef task(thread_name, delay):\n  for count in range(1, 4):\n    time.sleep(delay)\n    print(f'Thread {thread_name} counting {count}')\n\ndef run_without_threads():\n  task('t-1', 1)\n  task('t-2', 2)\n\ndef run_threads():\n  t1 = Thread(target = task, args = ('t-1', 1))\n  t2 = Thread(target = task, args = ('t-2', 2))\n\n  try:\n    t1.start()\n    t2.start()\n\n    # Program exits while the threads keep running\n  except Exception as e:\n    print('Unable to start thread: ', e)\n\ndef run_and_join_threads():\n  t1 = Thread(target = task, args = ('t-1', 1))\n  t2 = Thread(target = task, args = ('t-2', 2))\n\n  try:\n    t1.start()\n    t2.start()\n\n    # Joins the thread to main thread\n    # Waits for the threads to complete\n    t1.join()\n    t2.join()\n  except Exception as e:\n    print('Unable to start thread: ', e)\n\ndef test(method):\n  print(f'Running {method.__name__}:')\n  start_time = time.perf_counter()\n  method()\n  end_time = time.perf_counter()\n  print(f'Time taken: {end_time - start_time}')\n  print()\n\ntest(run_without_threads)\ntest(run_and_join_threads)\n</code></pre>"},{"location":"python/multithreading/introduction#custom-thread-class","title":"Custom Thread Class","text":"<pre><code>from threading import Thread\n\nclass CustomThread(Thread):\n  def __init__(self, name):\n    Thread.__init__(self)\n    self.name = name\n\n  # start() internally calls run() method\n  def run(self):\n    pass\n</code></pre>"},{"location":"python/multithreading/introduction#thread-priority","title":"Thread Priority","text":"<pre><code>from threading import Thread\nfrom queue import PriorityQueue\nimport time\nimport random\n\ndef producer(queue):\n  print('Producer Started')\n\n  for i in range(5):\n    value = random.random()\n    priority = random.randint(0, 5)\n    item = (priority, value)\n    queue.put(item)\n    print(f'P: {item}')\n\n  print('Producer Finished')\n\ndef consumer(queue):\n  print('Consumer Started')\n\n  while not queue.empty():\n    item = queue.get()\n    time.sleep(item[1])\n    queue.task_done()\n    print(f'C: {item}')\n\n  print('Consumer Finished')\n\ndef run():\n  queue = PriorityQueue()\n  pro = Thread(target = producer, args = (queue,))\n  con = Thread(target = consumer, args = (queue,))\n\n  pro.start()\n  con.start()\n\n  pro.join()\n  con.join()\n</code></pre>"},{"location":"python/multithreading/synchronization","title":"Synchronization","text":""},{"location":"python/multithreading/synchronization#lock","title":"Lock","text":"<pre><code>from threading import Thread, Lock\n\nthread_lock = Lock()\n\nclass CustomThread(Thread):\n  def __init__(self, name):\n    Thread.__init__(self)\n    self.name = name\n\n  # start() internally calls run() method\n  def run(self):\n    thread_lock.acquire()\n    task(self.name)\n    thread_lock.release()\n\ndef task(thread_name):\n  for i in range(1, 4):\n    time.sleep(1)\n    print(f'Thread {thread_name}: {i}')\n\ndef run():\n  threads = []\n\n  for i in range(1, 3):\n    thread = CustomThread(f't-{i}')\n    threads.append(thread)\n\n  for t in threads:\n    t.start()\n\n  for t in threads:\n    t.join()\n</code></pre>"},{"location":"python/multithreading/synchronization#semaphore","title":"Semaphore","text":"<pre><code>from threading import Thread, Semaphore\nimport time\n\nlock = Semaphore(2)\n\ndef task(name):\n  print(f'Thread {name}: waiting')\n  lock.acquire()\n\n  for i in range(3):\n    print(f'Thread {name}: {i}')\n    time.sleep(1)\n\n  lock.release()\n\ndef run():\n  t1 = Thread(target = task, args = ('t-1',))\n  t2 = Thread(target = task, args = ('t-2',))\n  t3 = Thread(target = task, args = ('t-3',))\n\n  t1.start()\n  t2.start()\n  t3.start()\n</code></pre>"},{"location":"python/multithreading/interthread_communication","title":"Interthread Communication","text":""},{"location":"python/multithreading/interthread_communication#event","title":"Event","text":"<ul> <li>Manages the state of an internal flag</li> <li>The flag is initially false and becomes true with set() method</li> <li>It resets to false with the clear() method</li> <li>To block the flow until the flag is true, wait() method is used</li> <li>To check if the flag is set or not, is_set() method is used</li> <li>Event and is_set() method can also be used to stop a thread</li> </ul> <pre><code>from threading import Thread, Event\nimport time\n\ndef signal_state():\n  while vehicle &lt; 10:\n    time.sleep(5)\n    print('Signal turns Green', end='\\n\\n')\n    event.set()\n\n    time.sleep(10)\n    print('Signal turns Red', end='\\n\\n')\n    event.clear()\n\ndef traffic_flow():\n  global vehicle\n  while vehicle &lt; 10:\n    print('Waiting for Green signal')\n    event.wait()\n    print('Traffic can move')\n\n    while event.is_set():\n      vehicle = vehicle + 1\n      print(f'Vehicle {vehicle} crossing')\n      time.sleep(2)\n\n    print('Traffic has to wait')\n\nvehicle = 0\nevent = Event()\n\ndef run():\n  global vehicle\n  vehicle = 0\n  t1 = Thread(target = signal_state)\n  t2 = Thread(target = traffic_flow)\n\n  t1.start()\n  t2.start()\n</code></pre>"},{"location":"python/multithreading/interthread_communication#condition","title":"Condition","text":"<ul> <li>Forces one or more threads to wait until notified by another thread</li> <li>Thread A acquires the condition and thread B is in waiting state</li> <li>After execution, thread A notifies thread B and thread A releases the condition</li> <li>After condition is released, the waiting thread B proceeds execution</li> </ul> <pre><code>from threading import Thread, Condition\nimport time\nimport random\n\nnumbers = []\ncondition = Condition()\n\ndef producer():\n  for i in range(3):\n    condition.acquire()\n\n    num = random.randint(1, 10)\n    numbers.append(num)\n    print(f'A generated number: {num}')\n\n    condition.notify()\n    print('A issued notification')\n\n    condition.release()\n    time.sleep(5)\n\ndef consumer():\n  for i in range(3):\n    condition.acquire()\n\n    print('B waiting for update')\n    while len(numbers) == 0: condition.wait()\n    num = numbers.pop()\n    print(f'B obtained number: {num}')\n\n    condition.release()\n    time.sleep(5)\n\ndef run():\n  global numbers\n  numbers = []\n\n  t1 = Thread(target = producer)\n  t2 = Thread(target = consumer)\n  t1.start()\n  t2.start()\n</code></pre>"},{"location":"ruby/introduction","title":"Introduction","text":""},{"location":"ruby/introduction#introduction","title":"Introduction","text":"<ul> <li>Interpreted language<ul> <li>No need to compile the program before executing</li> <li>Processed at runtime by interpreter line by line</li> </ul> </li> <li>Dynamically typed</li> <li>Strongly typed</li> <li>Automatic garbage collection</li> <li>Various external libraries are provided through gems</li> <li>Everything in ruby is an object except the blocks</li> <li>Shell for interpreter: irb (Interactive Ruby)</li> </ul>"},{"location":"ruby/introduction#basics","title":"Basics","text":"<pre><code># Single line comment\n= begin\nMultiline comment\n= end\n\n# Standard Input\nvalue = gets # Adds newline by default after input\nvalue = gets.chomp # To remove the newline\n\n# Prints next to each other\nprint 'Hello'\nprint val1, val2 # No space\nprint val1, ' ', val2 # If space is required\nprint \"Hello #{name}\" # String interpolation\nprint [1, 2] # 12\n\n# Prints in new line\nputs 'Hello'\nputs val1\nputs val1, val2 # val1 &amp; val2 printed in separate lines\nputs [1, 2] # 1 &amp; 2 printed in separate lines\n\n# Raw print\np [1, 2] # [1, 2]\n\n# Freezing object\n# Frozen object cannot be modified\n# Constants are usually freezed\nobj.freeze\n'hello'.freeze\n[1, 2, 3].freeze\n\n# Safe Navigation\nperson&amp;.name&amp;.display\n</code></pre>"},{"location":"ruby/variables","title":"Variables","text":""},{"location":"ruby/variables#variables","title":"Variables","text":"<pre><code># Declaration\nname = 'John Wick'\ncounter = 100\n\n# Get the data type\nname.class # String\ncounter.class # Integer\n\n# Parallel Assignment\na, b, c = 10, 20, 'John Wick'\na = b = c = 10\n</code></pre>"},{"location":"ruby/variables#types","title":"Types","text":"<ul> <li>Local</li> <li><code>local_variable</code></li> <li>Can be enlisted using <code>locals_variables</code></li> <li>Global</li> <li><code>$global_variable</code></li> <li>Can be enlisted using <code>globals_variables</code></li> <li>Constant</li> <li><code>CONSTANT_VARIABLE</code></li> <li>Can be enlisted using <code>constants</code> on a class</li> <li>Instance</li> <li><code>@instance_variable</code></li> <li>Can be enlisted using <code>instance_variables</code></li> <li>Variables instantiated for each object of a class</li> <li>Class</li> <li><code>@@class_variable</code></li> <li>Can be enlisted using <code>class_variables</code> on a class</li> <li>Variables specific to a class</li> </ul>"},{"location":"ruby/data_types","title":"Data Types","text":""},{"location":"ruby/data_types#data-types","title":"Data Types","text":"<ul> <li>Each data type is based on a class</li> <li><code>nil</code> is used to denote nothing</li> <li>Mutable: String, Array, Hash</li> <li>Immutable: Integer, Float, Boolean, Symbol</li> </ul>"},{"location":"ruby/data_types#boolean","title":"Boolean","text":"<pre><code># Boolean\nflag = true\nin_process = false\n</code></pre>"},{"location":"ruby/data_types#numeric","title":"Numeric","text":"<pre><code># Integer\na = 10\n\n# Float\nb = 10.25\n</code></pre>"},{"location":"ruby/data_types#string","title":"String","text":"<pre><code># String\ntext = 'Hello World!'\ntext = \"Hello World!\"\npara = 'Multiline'\\\n       'String'\n</code></pre>"},{"location":"ruby/data_types#symbol","title":"Symbol","text":"<pre><code># Symbol\n# Immutable\n# Light-weight strings\nstatus = :draft\ncategory = :electronics\n\n# Each symbol has only once instance\na = :value\nb = :value\na.object_id == b.object_id # true\n</code></pre>"},{"location":"ruby/data_types#array","title":"Array","text":"<ul> <li>Bounded and iterable</li> <li>Can store elements with different data types (as opposed to C)</li> </ul> <pre><code># Array\n# Mutable (elements and size can be changed)\nitems = [1, 2.5, 'one', 'two', [3, 4]]\nitems[2] # 'one'\nitems.first # 1\nitems.second # 2.5\nitems.last # [3, 4]\n\n# Range\n# (a..b) includes b\n# (a...b) excludes b\n(5..8) # 5, 6, 7, 8\n(5...8) # 5, 6, 7\n(1..3).each { |x| print x } # Will print 1, 2, 3\n(1..3).to_a # [1, 2, 3]\n(8..5) # 8, 7, 6, 5\n</code></pre>"},{"location":"ruby/data_types#hash","title":"Hash","text":"<pre><code># Hash\n# Symbol keys\nword_map = { one: 1, two: 2 }\nword_map[:one] # 1\n\n# Other keys\nword_map = { 'one' =&gt; 1, 'two' =&gt; 2 }\nword_map['one'] # 1\n\nnumber_map = { 1 =&gt;  'one', 2 =&gt; 'two' }\nnumber_map[1] # 'one'\n\nlist_map = { [1, 2] =&gt;  'one', [3, 4] =&gt; 'two' }\nlist_map[[1,2]] # 'one'\n</code></pre>"},{"location":"ruby/data_types#type-casting","title":"Type Casting","text":""},{"location":"ruby/data_types#implicit-casting","title":"Implicit Casting","text":"<ul> <li>When a language compiler/interpreter automatically converts an object</li> <li>Ruby is strongly typed</li> <li>Doesn't allow automatic type conversion between unrelated data types</li> <li>Examples<ul> <li>1 + '2' will raise an error</li> <li>1 + 2.5 = 3.5</li> <li>1 + true will raise an error</li> </ul> </li> <li>Object with lesser byte size is upgraded to match the larger byte size</li> <li>In 1 + 2.5, 1 will be upgraded to Float as 1.0</li> <li>This is because converting 2.5 to Integer will result in loss of data</li> </ul>"},{"location":"ruby/data_types#explicit-casting","title":"Explicit Casting","text":"<ul> <li>Using built-in functions to perform explicit conversions</li> <li>Such as string to integer</li> </ul> <pre><code>100.to_s # 100\n10.5.to_s # '10.5'\n[1, 2].to_s # '[1, 2]'\nString(100) # String function can also be used\n\n'100'.to_i # 100\n10.5.to_i # 10\n'Hello'.to_i # 0\nInteger('100') # 100\n\n100.to_f # 100.0\n'10.25'.to_f # 10.25\nFloat(100) # 100.0\n\nArray('Hello') # ['Hello']\nArray(['Hello']) # ['Hello']\n'Hello'.to_a # Raises error\n\nArray([1, 2]) # [1, 2]\nArray((2..4)) # [2, 3, 4]\n(2..4).to_a # [2, 3, 4]\n</code></pre>"},{"location":"ruby/operators","title":"Operators","text":""},{"location":"ruby/operators#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li>Includes regular operators like +, -, *, /</li> </ul> <pre><code># Floor Division\n# 11 / 4 = 2\n# 11.0 / 4 = 2.75\n# 11 / 4.0 = 2.75\na / b\n\na % b # Modulus\na ** b # Exponent\n</code></pre>"},{"location":"ruby/operators#logical-operators","title":"Logical Operators","text":"<pre><code>a &amp;&amp; b\na and b # 'and' has lower precedence than '&amp;&amp;'\n# 'and' has even lower precedence than '='\n\n# 'b' will be assigned because ('a' &amp;&amp; 'b') is evaluated first\nvalue = 'a' &amp;&amp; 'b' # value = ('a' &amp;&amp; 'b')\n# 'a' will be assigned because (value = 'a') is evaluated first\nvalue = 'a' and 'b' # (value = 'a') and ('b')\n\na || b\na or b # 'or' has lower precedence than '||'\n# 'or' has even lower precedence than '='\n\n# nil will be assigned because (nil || 'b') is evaluated first\nvalue = nil || 'b' # value = ('a' || 'b')\n# 'b' will be assigned because (value = nil) is evaluated first\nvalue = nil or 'b' # (value = 'a') or ('b')\n\n!a\nnot a\n</code></pre>"},{"location":"ruby/operators#membership-operators","title":"Membership Operators","text":"<pre><code>a = 10\nb = [10, 20]\n\nb.include?(a) # True\n!b.include?(a) # False\n{ 10: 'ten' }.includes(a) # True\n</code></pre>"},{"location":"ruby/operators#identity-operators","title":"Identity Operators","text":"<pre><code>[10, 20].is_a?(Array)\n'Hello'.is_a?(String)\nperson_object.is_a?(PersonClass)\n\n[10, 20].instance_of?(Array)\n[10, 20].kind_of?(Array)\n</code></pre>"},{"location":"ruby/operators#other-operators","title":"Other Operators","text":"<ul> <li>Comparison: ==, !=, &gt;, &lt;, &gt;=, &lt;=</li> <li>Assignment: =, +=, -=, *=, /=, etc.</li> <li>Bitwise: &amp;, |, ^, ~, &lt;&lt;, &gt;&gt;</li> </ul>"},{"location":"ruby/operators#equality-operators","title":"Equality Operators","text":"<pre><code># Generic or value equality\na == b\n\na = 1\nb = 1\na == b # true\n1 == 1.0 # true\n\n# Hash equality\n# If both have same type &amp; equal values\na.eql?(b)\n\na = 1\nb = 1\na.eql?(b) # true\n1.eql?(1) # true\n1.eql?(1.0) # false\n\n# Case equality\n# Used in 'when' clauses of 'case'\n# Useful implementations in range, regex, proc\na === b\n\n2 === 2.0 # true\n2.0 === 2 # true\n(1..5) === 2 # true\n2 === (1..5) # false\n/[a-z]*/ === 'hello' # true\nInteger === 5 # true\n\n# Identity Comparison\na.equal?(b) # If both have same object id\n\na = 10\nb = 10\na.equal?(b) # false\na.equal?(a.dup) # false\n1.equal?(1)\n</code></pre>"},{"location":"ruby/control_flow","title":"Control Flow","text":""},{"location":"ruby/control_flow#if-else","title":"If Else","text":"<ul> <li>Non nil values are evaluated to true</li> <li>0 is also evaluated to true</li> </ul> <pre><code># If\nif marks &lt; 30\n  result = 'Failed'\nelsif marks &gt; 75\n  result = 'Distinction'\nelse\n  result = 'Passed'\nend\n\n# Inline if\nresult = 'Failed' if marks &lt; 30\nresult = marks &lt; 30 ? 'Failed' : 'Passed'\n\n# Unless\nunless marks &gt; 30\n  result = 'Failed'\nelse\n  result = 'Passed'\nend\n\n# Inline unless\nresult = 'Failed' unless marks &gt; 30\n</code></pre>"},{"location":"ruby/control_flow#match-case","title":"Match Case","text":"<ul> <li>Case values can be any literal, even list</li> <li>Executes the first matched condition and returns</li> </ul> <pre><code>case category:\nwhen 'A'\n  'Distinction'\nwhen 'B'\n  'Passed'\nwhen 'C'\n  'Failed'\nelse # Default case\n  'Unknown'\nend\n</code></pre>"},{"location":"ruby/control_flow#loops","title":"Loops","text":""},{"location":"ruby/control_flow#for-loop","title":"For loop","text":"<pre><code>for item in words\n  puts(item)\nend\n\nfor i in (1..10)\n  puts(i)\nend\n\nfor key, val in data\n  print(key, ':', val, \"\\n\")\nend\n\nfor key in data:\n  p(key) # [key, val]\n</code></pre>"},{"location":"ruby/control_flow#while-loop","title":"While loop","text":"<pre><code>while i &lt; 10\n  i += 1\nend\n\ni += 1 while i &lt; 10\n</code></pre>"},{"location":"ruby/control_flow#until-loop","title":"Until loop","text":"<pre><code># Equivalent to while not\n# while i &lt; 10\nuntil i &gt;= 10\n  i += 1\nend\n\ni += 1 until i &gt;= 10\n</code></pre>"},{"location":"ruby/control_flow#jump-statements","title":"Jump Statements","text":"<pre><code>words = ['hello', 'world']\n# break\n# Will print 'hello'\nfor item in words\n  break if item == 'world'\n  puts(item)\nend\n\n# next\n# Will print 'world'\nfor item in words\n  next if item == 'hello'\n  puts(item)\nend\n\n# redo\n# Repeats the current iteration\nfor i in (1..5)\n  redo if i == 2 # Repeats iteration for i = 2\nend\n\n# retry\n# Restart from the beginning\nbegin\n  p('hello')\nrescue\n  retry # Restarts from beginning\nend\n\nfor i in (1..5)\n  retry if condition # Restarts from i = 1\nend\n</code></pre>"},{"location":"ruby/methods","title":"Methods","text":""},{"location":"ruby/methods#method","title":"Method","text":"<ul> <li>Last statement is automatically returned</li> </ul> <pre><code>def is_even(number)\n  number % 2 == 0\nend\nis_even(4)\n\ndef is_even(number)\n  return unless number.is_a?(Integer)\n  number % 2 == 0\nend\nis_even(4)\n\nalias is_even_alias is_even\n</code></pre>"},{"location":"ruby/methods#pass-by-reference-or-value","title":"Pass by Reference or Value","text":"<ul> <li>Behavior of arguments depends on whether they are mutable or immutable</li> </ul>"},{"location":"ruby/methods#immutable-arguments","title":"Immutable Arguments","text":"<ul> <li>If the passed object is immutable (like numeric), arguments are pass by value</li> <li>Changing their value creates a new object in memory and leaves the original variable unchanged</li> </ul> <pre><code>def process(value)\n  value = value + 1\n  p(value) # 11\nend\n\nvalue = 10\nprocess(value)\np(value) # 10\n</code></pre>"},{"location":"ruby/methods#mutable-arguments","title":"Mutable Arguments","text":"<ul> <li>If the passed object is mutable, arguments are pass by reference</li> <li>Since variable is a reference to the object in memory</li> </ul> <pre><code>def process(array)\n  array.append(3)\n  p(array) # [1, 2, 3]\nend\n\narray = [1, 2]\nprocess(array)\np(array) # [1, 2, 3]\n</code></pre>"},{"location":"ruby/methods#arguments","title":"Arguments","text":"<pre><code># Positional arguments\n# Required by the function in correct positional order\ndef process(val1, val2)\n  p(val1, val2)\nend\n\n# Keyword arguments\n# When arguments are identified by name\n# Should be used after positional arguments\ndef process(val1:)\n  p(val)\nend\nprocess(val1: 'hello')\n\n# Default arguments\n# Default value is used if no value is passed\ndef process(val1 = 5, val2: 'hello')\n  p(val1)\nend\nprocess()\n\n# Arbitrary arguments\n# Variable number of arguments\n# Should be used after positional arguments\ndef add(*args)\n  args.sum\nend\nadd(10, 20, 30, 40)\n\ndef process(*args, **kwargs)\n  args.sum\n  p(kwargs)\nend\nprocess(10, 20, name: 'John Wick', address: 'New York')\n</code></pre>"},{"location":"ruby/anonymous_methods","title":"Anonymous Methods","text":""},{"location":"ruby/anonymous_methods#blocks","title":"Blocks","text":"<ul> <li>Consists of chunks of code</li> <li>Invoked by using the yield statement</li> <li>Only entity in ruby which are not objects</li> <li>It's just a part of the syntax of a method call</li> </ul>"},{"location":"ruby/anonymous_methods#using-yield","title":"Using Yield","text":"<pre><code>def test\n  puts 'Method Started'\n  yield # Invokes block\n  puts 'Method Ended'\nend\n\ntest do\n  puts 'Block Executed'\nend\n# Method Started\n# Block Executed\n# Method Ended\n\n# Alternatives\n# test { puts 'Block Executed' }\n# test {\n#   puts 'Block Executed'\n# }\n\ndef test\n  puts 'Method Started'\n  yield 'Hello' # Invokes block\n  yield 'World' # Invokes block\n  puts 'Method Ended'\nend\n\ntest do |text|\n  puts \"Block Executed: #{text}\"\nend\n# Method Started\n# Block Executed: Hello\n# Block Executed: World\n# Method Ended\n</code></pre>"},{"location":"ruby/anonymous_methods#using-reference","title":"Using Reference","text":"<pre><code>def test(&amp;block)\n  puts 'Method Started'\n  block.call # Invokes block\n  puts 'Method Ended'\nend\n\ntest do\n  puts 'Block Executed'\nend\n# Method Started\n# Block Executed\n# Method Ended\n</code></pre>"},{"location":"ruby/anonymous_methods#proc","title":"Proc","text":"<ul> <li>A proc object is an encapsulation of a block of code</li> <li>Which can be stored in a local variable, passed to a method or another proc</li> <li>And can be called</li> </ul> <pre><code>adder = Proc.new { |a, b| a + b }\nadder.call\n\nmultiplier = Proc.new { |x| x * 2 }\n[1, 2, 3].map(&amp;multiplier)\n\n# Returns from current context\ndef process\n  adder = Proc.new { |a, b| return a + b }\n  adder.call(1, 2)\n  print('Hello')\nend\nprocess # Returns 3, 'Hello' won't be printed\n</code></pre>"},{"location":"ruby/anonymous_methods#lambda","title":"Lambda","text":"<ul> <li>An implementation of proc, returns a proc object</li> </ul> <pre><code>adder = -&gt;(a, b) { a + b }\nadder = lambda { |a, b| a + b }\nadder.call(10, 20)\n# Other calling methods\nadder.(10, 20)\nadder[10, 20]\n\nmultiplier = -&gt;(x) { x * 2}\n[1, 2, 3].map(&amp;multiplier)\n\n# Returns like a normal method\ndef process\n  adder = -&gt;(a, b) { return a + b }\n  adder.call(1, 2)\n  puts('Hello')\nend\nprocess # Returns nil, 'Hello' will be printed\n</code></pre>"},{"location":"ruby/anonymous_methods#closure","title":"Closure","text":"<ul> <li>Concept that proc &amp; lambda carry the context</li> <li>Variables &amp; methods are referenced from the context where they are defined</li> </ul> <pre><code>def test(printer)\n  counter = 100\n  printer.call\nend\n\ncounter = 1\nprinter = Proc.new { puts counter }\ntest(printer) # Prints 1 (and not 100)\n</code></pre>"},{"location":"ruby/iterators","title":"Iterators","text":""},{"location":"ruby/iterators#iterators","title":"Iterators","text":"<ul> <li>Works on collections like arrays and hashes</li> </ul> <pre><code># Inline Block\narray.each { |x| puts x }\n# Multiline Block\narray.each do |x|\n  puts x\nend\n\n# `array.map(&amp;lambda_or_proc)`\n# &amp; is used to pass lambda or proc as a block to a method\n# &amp; when combined with an object calls to_proc on the object\n# Explicit calling will be like `:to_s.to_proc.call(x)`\n# When combined with &amp; (like `&amp;:to_s`), it passes it as a block\n# This is equivalent to array.map { |x| x.to_s }\narray.map(&amp;:to_s)\n\n# Bang operator\n# Updates the original array\narray.map!(&amp;:to_s)\n# Without bang operator, it will return a new array\narray.map(&amp;:to_s)\n\n# With index\narray.each_with_index { |item, index| p(item, index) }\narray.each.with_index { |item, index| p(item, index) }\n</code></pre>"},{"location":"ruby/iterators#destructuring","title":"Destructuring","text":"<pre><code># Hash\nhash.each { |key, value| p(\"#{key}: #{value}\") }\nhash.each { |item| p(\"#{item[0]}: #{item[1]}\") } # item = [key, value]\n\n# Array within array\n[[1, 2], [3,4]].each { |a, b| p(\"pair of #{a} and #{b}\") }\n</code></pre>"},{"location":"ruby/iterators#types","title":"Types","text":"<pre><code>10.times { |x| p(x) }\n(5..10).step(2) { |x| p(x) }\narray.all?(&amp;:even?)\narray.any?(&amp;:even?)\n\n# Performs operation on each item and returns the original array\narray.each { |x| x.some_operation }\n(5..10).each { |x| p(x) }\n\n# Manipulates each item and returns the new values of array\n# Aliases: collect\narray.map { |x| x * 2 }\n\n# Selects the items and returns a new array with those items\n# Aliases: filter\narray.select { |x| x.even? }\n# Rejects the even items\narray.reject { |x| x.even? }\n\n# Finds and returns the first matched value, use find_all for all matches\n# Aliases: detect\narray.find { |x| x = 'hello' }\narray.find_all { |x| x = 'hello' }\n\n# Aggregates the values into a variable\n# Need to return the aggregator\n# Aliases: inject\narray.reduce { |sum, x| sum += x; sum }\narray.reduce(5) { |sum, x| sum += x; sum } # initial value of sum will be 5\narray.reduce(&amp;:+)\n\n# Custom sort\n# Similar iterators: reverse_by, min_by, max_by, group_by\narray.sort_by { |word| word.length }\n\n# With an initial object\narray.each_with_object({}) { |x, obj| obj[x] = x * 2 }\narray.each_with_object([]) { |x, obj| obj.push(x * 2) }\n\n# Zips values with each other\n[1, 2].zip([3, 4]) # [[1, 3], [2, 4]]\n</code></pre>"},{"location":"ruby/modules","title":"Modules","text":""},{"location":"ruby/modules#modules","title":"Modules","text":"<ul> <li>Groups methods, classes, constants together</li> <li>Provides a namespace and prevents name clashes</li> <li>Implements mixin</li> </ul> <pre><code>module OrderDetail\n  DEFAULT_STATUS = 'draft'\n  NEXT_STATUSES = { 'draft': 'processing' }\n\n  def next_status(current_status)\n    NEXT_STATUSES[current_status]\n  end\nend\n\nOrderDetail::DEFAULT_STATUS\n\nmodule Order\n  module Detail\n    class Payment\n      def process\n      end\n    end\n  end\nend\n\nOrder::Detail::Payment.process\n</code></pre>"},{"location":"ruby/modules#importing","title":"Importing","text":"<ul> <li><code>require './order_detail'</code></li> <li>'.rb' is not required</li> <li>Other declarations<ul> <li><code>require '/home/package/order_detail'</code></li> <li><code>require 'order_detail'</code> if it is present in $LOAD_PATH</li> <li>For example, gems are already loaded in $LOAD_PATH</li> </ul> </li> <li>Loads files only once</li> <li>Changes made in file are not reflected while the program is running</li> <li>Should be used to include gems</li> <li><code>require_relative 'order_detail'</code></li> <li>Other declarations<ul> <li><code>require_relative '../package/order_detail'</code></li> </ul> </li> <li>Local files relative to the current directory</li> <li>Prefixing <code>./</code> for current directory is not required</li> <li><code>load './order_detail.rb'</code></li> <li>'.rb' is required</li> <li>Reloads the code every time</li> <li>Picks up any changes made in file while the program is running</li> <li>May become an overhead if the file is being used at many places</li> <li><code>autoload :OrderDetail, './order_detail.rb'</code></li> <li>Lazy load, won't load the library that is not being used</li> </ul>"},{"location":"ruby/modules#mixins","title":"Mixins","text":"<ul> <li>Ruby doesn't support multiple inheritance</li> <li>But mixins can be used to emulate the behavior</li> </ul>"},{"location":"ruby/modules#include","title":"Include","text":"<ul> <li>Imports entities as instance methods &amp; variables</li> <li>Can be included in class or another module</li> <li>Inserts entities into ancestory chain between the class and the superclass</li> </ul> <pre><code>module OrderDetail\n  def process\n  end\nend\n\nclass Order\n  include OrderDetail\n  include Package::Payment # Nested modules\nend\n\nOrder.new.process\nOrder.process # Raises error\n\n# Module methods can be overrided in class\n# Even if module is included after the method in class\nOrder.ancestors # [Order, OrderDetail, ...]\nOrder.new.process # Preference: Order method, OrderDetail method\n\n# Can be nested (applies to extend &amp; prepend as well)\nmodule OrderCategory\n  include OrderDetail\nend\n</code></pre>"},{"location":"ruby/modules#extend","title":"Extend","text":"<ul> <li>Imports entities as class methods &amp; variables</li> <li>Can be included in class or another module</li> </ul> <pre><code>module OrderDetail\n  def process\n  end\nend\n\nclass Order\n  extend OrderDetail\nend\n\nOrder.process\nOrder.new.process # Raises error\n\n# Module methods can be overrided in class\n# Even if module is extended after the method in class\nOrder.ancestors # [Order, ...] OrderDetail not included since it is extended to the class\nOrder.process # Preference: Order method, OrderDetail method\n</code></pre>"},{"location":"ruby/modules#prepend","title":"Prepend","text":"<ul> <li>Similar to include but inserted at the top of ancestory chain</li> </ul> <pre><code>module OrderDetail\n  def process\n  end\nend\n\nclass Order\n  prepend OrderDetail\nend\n\nOrder.new.process\nOrder.process # Raises error\n\n# Module methods cannot be overrided in class\n# Even if module is prepended after the method in class\nOrder.ancestors # [OrderDetail, Order, ...]\nOrder.process # Preference: OrderDetail method, Order method\n</code></pre>"},{"location":"ruby/modules#module-methods","title":"Module Methods","text":"<pre><code># Methods defined with self are specific to module\nmodule OrderDetail\n  def self.process\n  end\nend\nOrderDetail.process\n\n# Alternative way\nmodule OrderDetail\n  extend self\n\n  def process\n  end\nend\n\n# Module methods (self methods) cannot be extended\nclass Order\n  include OrderDetail\n  # Or, extend OrderDetail\n  # Or, prepend OrderDetail\nend\nOrder.new.process # Raises error\nOrder.process # Raises error\n</code></pre>"},{"location":"ruby/modules#initializers","title":"Initializers","text":"<pre><code>module OrderDetail\n  def self.included(target)\n    # Executes when module is included in target\n  end\n\n  def self.extended(target)\n    # Executes when module is included in target\n  end\n\n  def self.prepended(target)\n    # Executes when module is included in target\n  end\nend\n\nclass Vehicle\n  def self.inherited(child_class)\n    # Executes when Vehicle class is inherted into child class\n  end\nend\n</code></pre>"},{"location":"ruby/classes","title":"Classes","text":""},{"location":"ruby/classes#instance-methods","title":"Instance Methods","text":"<pre><code>class Employee\n  # Constructor\n  def initialize(name, age)\n    # Instance Variables\n    @name = name\n    @age = age\n  end\n\n  # Instance Methods\n  def display_name\n    p(name)\n  end\nend\n\nEmployee.name # Employee\n\nemp = Employee.new('John Wick', 25)\nemp.display_name\nemp.is_a?(Employee) # True\nemp.respond_to?(:display_name) # True\n</code></pre>"},{"location":"ruby/classes#class-methods","title":"Class Methods","text":"<pre><code>class Employee\n  # Class Constant\n  COMPANY = 'Company Name'\n\n  # Class Variables\n  @@department = 'Finance'\n\n  # Class Methods\n  def self.print_dept\n    p(@@department)\n  end\n\n  class &lt;&lt; self\n    def print_custom_dept(dept):\n      p(dept)\n    end\n  end\n</code></pre>"},{"location":"ruby/classes#access-modifiers","title":"Access Modifiers","text":"<pre><code>class Animal\n  def public_method\n    private_method\n  end\n\n  protected\n\n    def protected_method\n      puts 'protected'\n    end\n\n  private\n\n    def private_method\n      puts 'private'\n    end\nend\n\n# Private attributes can be accessed through special methods\nemp = Employee.new('John Wick', 25)\nemp.instance_variable_get('@name')\nemp.instance_variable_set('@name', 'Tom Cruise')\n</code></pre>"},{"location":"ruby/classes#getter-and-setter","title":"Getter and Setter","text":""},{"location":"ruby/classes#using-regular-methods","title":"Using Regular Methods","text":"<pre><code>class Employee\n  def initialize(name, age)\n    @name = name\n    @age = age\n  end\n\n  # Getter\n  def name\n    @name\n  end\n\n  # Setter\n  def name=(value)\n    # Can add validations &amp; processing\n    @name = value\n  end\nend\n\nemp = Employee.new('John Wick', 25)\nemp.name\nemp.name = 'Tom Cruise'\n</code></pre>"},{"location":"ruby/classes#using-accessors","title":"Using Accessors","text":"<pre><code>class Employee\n  attr_accessor :name # Defines getter &amp; setter\n  attr_reader :age # Defines getter\n  attr_writer :dept # Defines setter\n\n  def initialize(name, age, dept:)\n    @name = name\n    @age = age\n    @dept = dept\n  end\nend\n\nemp = Employee.new('John Wick', 25, dept: 'Finance')\nemp.name\nemp.name = 'Tom Cruise'\nemp.age\n# emp.age = 30 raises error since setter is not defined\n# emp.dept raises error since getter is not defined\nemp.dept = 'Marketing'\n</code></pre>"},{"location":"ruby/classes#nested-classes","title":"Nested Classes","text":"<pre><code>class Student\n  def initialize(name)\n    @name = name\n    @subjects = [Subject.new('Physics'), Subject.new('Maths')]\n  end\n\n  class Subject\n    def initialize(title)\n      @title = title\n    end\n  end\nend\n</code></pre>"},{"location":"ruby/oop_classes","title":"Oop Classes","text":""},{"location":"ruby/oop_classes#inheritance","title":"Inheritance","text":"<pre><code>class Parent\n  def initialize(name)\n    @name = name\n  end\nend\n\nclass Child &lt; Parent\n  def initialize(name)\n    super # Will pass all the arguments\n    super(name) # If arguments are different than parent class\n\n    @dept = 'Finance'\n  end\nend\n\n# Multiple Inheritance\n# Not supported, but the behavior can be emulated using mixins\n</code></pre>"},{"location":"ruby/oop_classes#abstraction","title":"Abstraction","text":"<ul> <li>Can be implemented using inheritance and error handling</li> </ul> <pre><code># Abstract Class\nclass Shape\n  def draw\n    raise Exception('Not implemented')\n  end\nend\n\n# Concrete Classes\nclass Circle &lt; Shape\n  def draw\n  end\nend\n\nclass Rectangle &lt; Shape\n  def draw\n  end\nend\n</code></pre>"},{"location":"ruby/oop_classes#polymorphism","title":"Polymorphism","text":"<pre><code># Method Overriding\nclass Parent\n  def display\n    puts('Parent')\n  end\nend\n\nclass Child &lt; Parent\n  def display\n    puts('Child')\n  end\nend\n\n# Method Overloading\n# Not supported\n</code></pre>"},{"location":"ruby/oop_classes#encapsulation","title":"Encapsulation","text":"<pre><code>class Employee\n  def initialize(name)\n    @name = name\n  end\nend\n\nemp = Employee.new('Tom Cruise')\n# Raises error\n# Private attributes are encapsulated\nemp.name\n</code></pre>"},{"location":"ruby/error_handling","title":"Error Handling","text":""},{"location":"ruby/error_handling#errors","title":"Errors","text":"<ul> <li>Syntax errors</li> <li>Logical errors: Output doesn't match the expectation</li> <li>Runtime error or exception</li> <li>An event occurring during the execution disrupts the normal flow</li> </ul> <pre><code>raise ExceptionType.new(message)\nraise StandardError.new('error message')\nraise(StandardError, 'error message')\n</code></pre>"},{"location":"ruby/error_handling#try-block","title":"Try Block","text":"<pre><code>begin:\n  # Perform operations\nrescue ExceptionOne =&gt; e\n  p(e.message)\n  p(e.backtrace)\nrescue ExceptionTwo, ExceptionThree\n  # Perform operations\nrescue\n  # Any other exceptions\nelse\n  # If there is no exception\nensure\n  # Must execute whether an exception is raised or not\nend\n</code></pre>"},{"location":"ruby/error_handling#custom-exceptions","title":"Custom Exceptions","text":"<pre><code>class CustomException &lt; Exception\nend\n</code></pre>"},{"location":"ruby/error_handling#logging","title":"Logging","text":"<pre><code>require 'logging'\nlogger = Logger.new(STDOUT)\nlogger = Logger.new('log_file.log')\n\nlogger.debug('message')\nlogger.info('message')\nlogger.warn('message')\nlogger.error('message')\nlogger.fatal('message')\n</code></pre>"},{"location":"ruby/file_handling","title":"File Handling","text":""},{"location":"ruby/file_handling#access-modes","title":"Access Modes","text":"<ul> <li>r: read only (default)</li> <li>File pointer is at the beginning of the file</li> <li>w: write only</li> <li>Overwrites the file if already exists</li> <li>File pointer is at the beginning of the file</li> <li>r+: read &amp; write</li> <li>w+: read &amp; write</li> <li>a: append</li> <li>File pointer is at the end of the file</li> <li>a+: read &amp; append</li> </ul>"},{"location":"ruby/file_handling#read","title":"Read","text":"<pre><code>File.open(file_name, 'r') do |file|\nend\n\nFile.foreach(file_name) { |line| p line }\n\nfile = File.open(file_name, 'r')\n\n# Seek is used to move the cursor position\nfile.seek(offset)\nfile.pos # Returns current position\n\nfile.read # Reads till the end of file\nfile.read(10) # Reads 10 bytes of data\nfile.readline # Reads one line\nfile.readline(10) # Reads ten lines\n\nfile.close\n</code></pre>"},{"location":"ruby/file_handling#write","title":"Write","text":"<pre><code>file = File.open(file_name, 'w')\nfile.write('hello world')\nfile.close\n</code></pre>"},{"location":"ruby/file_handling#read-write","title":"Read &amp; Write","text":"<pre><code>file = open(file_name, 'a+')\nfile.seek(10)\nfile.write('hello world')\nfile.close\n</code></pre>"},{"location":"ruby/file_handling#files-and-directories","title":"Files and Directories","text":"<pre><code># Files\nFile.rename('test1.txt', 'test2.txt')\nFile.delete('test1.txt')\n\n# Directories\nDir.mkdir('new_dir')\nDir.delete('old_dir')\nDir.pwd\nDir.chdir('new_dir') # Change current directory\nDir.chdir('/home/new_dir')\n</code></pre>"},{"location":"ruby/data_classes/numericals","title":"Numericals","text":""},{"location":"ruby/data_classes/numericals#numbers","title":"Numbers","text":"<ul> <li>Immutable</li> </ul> <pre><code>abs\npow(y)\nround # Removes all decimal places\nround(till_decimal_places)\nceil\nfloor\n\ninteger?\npositive?\nnegative?\nzero?\nnonzero?\neven?\nodd?\n</code></pre>"},{"location":"ruby/data_classes/numericals#math","title":"Math","text":"<pre><code>Math.sqrt(x)\n</code></pre>"},{"location":"ruby/data_classes/numericals#random","title":"Random","text":"<pre><code>Random.rand # Random float between 0 and 1\nRandom.rand(10) # Random number between 0 &amp; 10\nRandom.rand(10.0) # Random float between 0 &amp; max\nRandom.rand(10..20) # Random number between 10 &amp; 20\nRandom.rand(10.0..20.0) # Random float between 10 &amp; 20\n</code></pre>"},{"location":"ruby/data_classes/strings","title":"Strings","text":""},{"location":"ruby/data_classes/strings#strings","title":"Strings","text":"<ul> <li>Mutable</li> </ul> <pre><code>text = 'hello'\ntext[1] # 'e' (Single char is also a string)\ntext[-4] # 'e'\ntext + 'world' # 'hello world'\ntext * 3 # 'hellohellohello'\n\ntext = \"Hello World!\"\npara = 'Multiline'\\\n       'String'\n\n'hello'.include?('el') # True\n\n'hello\\nworld' # Doesn't add new line\n\"hello\\nworld\" # Adds new line\n</code></pre>"},{"location":"ruby/data_classes/strings#interpolation","title":"Interpolation","text":"<pre><code>\"Employee name is #{name}\"\n\"Category code is #{get_code(product)}\"\n\"Category code is #{category || DEFAULT_CATEGORY}\"\n\"Pecentage: #{(value / 20) * 100}\"\n</code></pre>"},{"location":"ruby/data_classes/strings#slicing","title":"Slicing","text":"<pre><code># From left, the indexes are 0, 1, 2, ...\n# From right, the indexes are ..., -3, -2, -1\n# Can use [range] or slice(range)\n\ntext = 'hello world'\ntext[..4] # 'hello', the range (..4) alone is not valid\ntext[...5] # 'hello'\ntext[6..] # 'world'\ntext[..-7] # 'hello'\n\ntext[2..4] # 'llo'\ntext[-5..-3] # 'wor'\ntext[6..-3] # 'wor'\n\ntext[6..][..2] # 'wor'\n\ntext[2..3] = 'kk' # 'hekko world'\ntext[2..4] = 'kk' # 'hekk world'\ntext[2..3] = 'asdf' # 'heasdfo world'\n</code></pre>"},{"location":"ruby/data_classes/strings#instance-methods","title":"Instance Methods","text":"<ul> <li>Applied on string like <code>string.method_name(*args, **kwargs)</code></li> </ul>"},{"location":"ruby/data_classes/strings#general","title":"General","text":"<pre><code>length\nempty? # nil?\n# present? &amp; blank? are rails methods\nto_sym\n\nstr &lt;&lt; str2 # Appends str2\ninsert(index, str2)\nreverse # reverse!\n</code></pre>"},{"location":"ruby/data_classes/strings#find-and-replace","title":"Find and replace","text":"<pre><code>index(substr) # rindex\ncount(substr) # Counts occurrence of substring\n\ntr(substr, replace_with)\nsub(regex_or_string, replace_with) # Replaces the first matching regex or string\nsub('foo', hash) # Replaces foo with bar, hash = { 'foo' =&gt; 'bar' }\nsub(regex_or_string) { |match| some_action }\ngsub(regex_or_string, replace_with) # Replaces all the matching regex or string\n\nstart_with(prefix)\nend_with(suffix)\ndelete_prefix(prefix)\ndelete_suffix(suffix)\n</code></pre>"},{"location":"ruby/data_classes/strings#split-and-join","title":"Split and Join","text":"<pre><code>strip # Removes trailing whitespaces\n# lstrip, rstrip\nsplit(delimiter_or_regex) # Deletes delimiter, splits and returns list of subsrings\npartition(sep) # Splits the string in 3 tuples on occurence of separator\n# lpartition, rpartition\narray.join(str) # Joins the array using the string\n</code></pre>"},{"location":"ruby/data_classes/strings#case","title":"Case","text":"<pre><code>casecmp?(str2) # Compares string by ignoring case\n# Use with ! to edit in place\ndowncase\nupcase\ntitleize # Titlecase\ncapitalize # Capitalizes the first letter of string\n</code></pre>"},{"location":"ruby/data_classes/symbols","title":"Symbols","text":""},{"location":"ruby/data_classes/symbols#symbols","title":"Symbols","text":"<ul> <li>Immutable</li> </ul> <pre><code>status = :draft\nstatus[1] # 'r'\nstatus[-4] # 'r'\n# status + 'world' raises error\nstatus.to_s + 'status' # 'draft status'\n\n# Each symbol has only once instance\na = :value\nb = :value\na.object_id == b.object_id # true\n</code></pre>"},{"location":"ruby/data_classes/symbols#slicing","title":"Slicing","text":"<ul> <li>Similar to strings</li> </ul>"},{"location":"ruby/data_classes/symbols#instance-methods","title":"Instance Methods","text":"<pre><code># General\nlength\nto_s\n\n# Find and replace\nstart_with(prefix)\nend_with(suffix)\n\n# Case\ncasecmp?(sym2) # Compares symbol by ignoring case\ndowncase\nupcase\ncapitalize # Capitalizes the first letter of symbol\n</code></pre>"},{"location":"ruby/data_classes/arrays","title":"Arrays","text":""},{"location":"ruby/data_classes/arrays#arrays","title":"Arrays","text":"<ul> <li>Mutable: Any item can be modified, removed or added</li> <li>The elements can be of any data type (unlike C, C++, Java)</li> </ul> <pre><code>subjects = ['Physics', 'Chemistry', 'Maths']\nitems = [25.50, True, -50, 1+2j, 'Physics']\nArray(1) # [1]\nArray([1]) # [1]\n\n[1, 2] + [3, 4] # [1, 2, 3, 4]\n[1] * 4 # [1, 1, 1, 1]\n[{}] * 4 # [{}, {}, {}, {}]\nArray.new(4, 1) # [1, 1, 1, 1]\nArray.new(4, {}) # [{}, {}, {}, {}]\n{ one: 1, two: 2 }.to_a # [[:one, 1], [:two, 2]]\n\n# For 2D array, don't define like [[1] * 4] * 2 or Array.new(2, Array.new(4, 1))\n# Because it will update every change in each row\n# For example, num[0][2] = 2 will result in [[1, 1, 2, 1], [1, 1, 2, 1]]\nArray.new(2) { [1] * 4 }\nArray.new(2) { Array.new(4, 1) }\n</code></pre>"},{"location":"ruby/data_classes/arrays#accessing","title":"Accessing","text":"<pre><code>subjects[1] # 'Chemistry'\nsubjects[1] = 'Statistics'\n\nitems.values_at(1, 3) # Elements at index 1 &amp; 3\nitems.first # First element\nitems.first(3) # First 3 elements\nitems.last\nitems.last(3)\nitems.take # Chooses an element randomly\nitems.take(3) # Chooses 3 elements randomly\n\n[1, 2, 3].include?(2) # True\n</code></pre>"},{"location":"ruby/data_classes/arrays#unpacking","title":"Unpacking","text":"<pre><code>x, y = [1, 2] # x = 1, y = 2\nx, *y = [1, 2, 3] # x = 1, y = [2, 3]\nx, *y, z = [1, 2, 3, 4] # x = 1, y = [2, 3], z = 4\nx, *y, z = [1, 4] # x = 1, y = [], z = 4\n</code></pre>"},{"location":"ruby/data_classes/arrays#slicing","title":"Slicing","text":"<pre><code># From left, the indexes are 0, 1, 2, ...\n# From right, the indexes are ..., -3, -2, -1\n\nnum = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnum[..4] # [1, 2, 3, 4, 5]\nnum[...5] # [1, 2, 3, 4, 5]\nnum[6..] # [7, 8, 9, 10]\nnum[..-7] # [1, 2, 3, 4]\n\nnum[2..4] # [3, 4, 5]\nnum[-5..-3] # [6, 7, 8]\nnum[6..-3] # [7, 8]\n\nnum[6..][..2] # [7, 8, 9]\n\nnum[2..3] = [6, 7] # [1, 2, 6, 7, 5]\nnum[2..3] = [6, 7, 8, 9] # Adds extra items as well: [1, 2, 6, 7, 8, 9, 5]\nnum[2..3] = [6] # Removes existing items: [1, 2, 6, 5]\n</code></pre>"},{"location":"ruby/data_classes/arrays#instance-methods","title":"Instance Methods","text":""},{"location":"ruby/data_classes/arrays#general","title":"General","text":"<pre><code>length\nempty? # nil?\n# present? &amp; blank? are rails methods\nmax\nmin\nsum # Nesting not allowed: [[1, 2], [3]]\nsort # sort!\nreverse # reverse!\nflatten # Flattens array from [[[1, 2]], [3, 4]] to [1, 2, 3, 4]\n# Refer iterators\n</code></pre>"},{"location":"ruby/data_classes/arrays#insert","title":"Insert","text":"<pre><code>arr &lt;&lt; obj # Add obj using shovel operator\npush(obj) # Add obj at end\nunshift(obj) # Add obj at beginning\ninsert(index, obj)\ndup # Duplicate, doing list2 = list1 will only refer list2 to list1\n</code></pre>"},{"location":"ruby/data_classes/arrays#remove","title":"Remove","text":"<pre><code>pop # Removes last item\npop(num) # Removes last num items\nshift # Removes first item\nshift(num) # Removes first num items\ndelete_at(index)\ndelete(element)\n\ncompact # Removes nil elements\nuniq # Removes duplicates\nclear # Remove all the items\n</code></pre>"},{"location":"ruby/data_classes/arrays#find","title":"Find","text":"<pre><code>count(obj) # Count of occurences of obj\nindex(obj) # Lowest index where obj occurs\n</code></pre>"},{"location":"ruby/data_classes/hashes","title":"Hashes","text":""},{"location":"ruby/data_classes/hashes#hashes","title":"Hashes","text":"<ul> <li>Mutable</li> </ul> <pre><code>subjects = { phy: 'Physics', chem: 'Chemistry', math: 'Mathematics' } # Symbol keys\nnumbers = { 1 =&gt; 'one', 2 =&gt; 'two' } # Number keys\nwords = { 'one' =&gt; 1, 'two' =&gt; 2 } # String keys\nlists = { [1, 2] =&gt;  'one', [3, 4] =&gt; 'two' } # Array keys\n\n[['a', 100], ['b', 200]].to_h # From list of lists: { 'a' =&gt; 100, 'b' =&gt; 200 }\n{ **hash1, **hash2 }\n</code></pre>"},{"location":"ruby/data_classes/hashes#accessing","title":"Accessing","text":"<pre><code># If key is not present, it will return nil\nsubjects[:math] # Mathematics\nnumbers[1]\nwords['one'] # 1\nlists[[1, 2]]\n\nsubjects[:math] = 'Algebra'\nsubjects[:stat] = 'Statistics'\nsubjects.delete(:math)\n\nsubjects.to_a # Array of pairs\nsubjects.each { |key, value| p(key, value) }\nsubjects.include?(:phy) # true\n</code></pre>"},{"location":"ruby/data_classes/hashes#general-methods","title":"General Methods","text":"<pre><code>empty? # nil?\n# present? &amp; blank? are rails methods\neach_key(&amp;block)\neach_value(&amp;block)\neach_pair(&amp;block)\n</code></pre>"},{"location":"ruby/data_classes/hashes#instance-methods","title":"Instance Methods","text":"<pre><code># Return view objects that are refreshed dynamically whenever anything changes\n# Need to typecast to get a list from them\nkeys\nvalues\nentries # [[key1, val1], [key2, val2]]\ndig(:key1, :key2, ...) # Gets value from nested hash\n\ndefault # Returns default value\ndefault = value # Sets default value\n\n# Updates the existing keys from dict2 and adds new keys\n# List of lists or tuples, or keywords can also be used instead of dict2\nmerge(hash2) # merge!\nmerge(key1: val1, key2: val2, ...)\nmerge(h2, h3)\nmerge(h2, h3) { |key, old_val, new_val| old_val + new_val }\ntransform_keys(&amp;block) # Updates all keys as specified in the block\ntransform_values(&amp;block) # Updates all values as specified in the block\ndup\n\ncompact # Removes nil elements\ndelete(:key) # Removes the key and returns the value\nslice(**keys) # Get a new hash with the given keys\nexcept(**keys) # Get a new hash except the given keys\n</code></pre>"},{"location":"ruby/modules/time","title":"Time","text":""},{"location":"ruby/modules/time#time","title":"Time","text":"<pre><code>Time.now\nTime.new(year, month, day, hour, second, millisec, zone)\nTime.local(year, month, day, hour, second, millisec, zone)\nTime.utc(year, month, day, hour, second, millisec, zone)\nTime.at(epoch_secs)\n\ntime.year # month, day, wday, hour, min, sec, zone\ntime.monday?\ntime.zone\ntime.utc?\n\nt1 == t2 # &lt;, &gt;\nt1.between?(t2, t3)\n</code></pre>"},{"location":"ruby/mutlithreading/introduction","title":"Introduction","text":""},{"location":"ruby/mutlithreading/introduction#introduction","title":"Introduction","text":"<pre><code>require 'benchmark'\n\ndef task(thread_name, delay)\n  (1..4).each do |count|\n    sleep(delay)\n    p(\"Thread #{thread_name} counting #{count}\")\n  end\nend\n\ndef run_without_threads\n  task('t-1', 1)\n  task('t-2', 2)\nend\n\ndef run_threads()\n  begin\n    t1 = Thread.new { task('t-1', 1) }\n    t2 = Thread.new { task('t-2', 2) }\n\n    # Program exits while the threads keep running\n  rescue =&gt; e\n    p('Unable to start thread: ', e.message)\n  end\nend\n\ndef run_and_join_threads()\n  begin\n    t1 = Thread.new { task('t-1', 1) }\n    t2 = Thread.new { task('t-2', 2) }\n\n    # Joins the thread to main thread\n    # Waits for the threads to complete\n    t1.join\n    t2.join\n  rescue =&gt; e\n    p('Unable to start thread: ', e.message)\n  end\nend\n\nBenchmark.measure { run_without_threads }\nBenchmark.measure { run_and_join_threads }\n</code></pre>"},{"location":"ruby/mutlithreading/synchronization","title":"Synchronization","text":""},{"location":"ruby/mutlithreading/synchronization#mutex","title":"Mutex","text":"<pre><code>$mutex = Mutex.new\n\ndef task(thread_name)\n  (1..4).each do |i|\n    sleep(1)\n    p(\"Thread #{thread_name}: #{i}\")\n  end\nend\n\nclass Counter\n  def initialize(name)\n    @name = name\n  end\n\n  def run\n    $mutex.synchronize do\n      task(@name)\n    end\n  end\nend\n\ndef run\n  threads = []\n\n  (1..2).each do |i|\n    thread = Counter.new(\"t-#{i}\")\n    threads.push(thread)\n  end\n\n  threads.map! { |t| Thread.new { t.run } }\n  threads.each { |t| t.join }\nend\n</code></pre>"},{"location":"ruby/mutlithreading/interthread_communication","title":"Interthread Communication","text":""},{"location":"ruby/mutlithreading/interthread_communication#condition-variable","title":"Condition Variable","text":"<pre><code>$numbers = []\n$mutex = Mutex.new\n$condition = ConditionVariable.new\n\ndef producer\n  3.times do\n    $mutex.synchronize do\n      num = Random.rand(1..10)\n      $numbers.push(num)\n      p(\"P generated number: #{num}\")\n\n      $condition.signal\n      p('P issued notification')\n    end\n\n    sleep(5)\n  end\nend\n\ndef consumer\n  3.times do\n    $mutex.synchronize do\n      p('C waiting for update')\n      $condition.wait($mutex) while $numbers.empty?\n\n      num = $numbers.shift\n      p(\"C obtained number: #{num}\")\n    end\n\n    sleep(5)\n  end\nend\n\ndef run\n  $numbers = []\n  t1 = Thread.new { producer }\n  t2 = Thread.new { consumer }\n  t1.join\n  t2.join\nend\n</code></pre>"}]}